definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  httpresponse.Response:
    properties:
      code:
        type: integer
      data: {}
      msg:
        type: string
    type: object
  model.Project:
    properties:
      access:
        type: string
      created_at:
        type: integer
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      desc:
        type: string
      git:
        type: string
      id:
        type: integer
      name:
        type: string
      secret_key:
        description: "Key        \tstring    \t`json:\"key\" form:\"key\" db:\"define:varchar(50);comment:key;defaultValue:''\"`"
        type: string
      status:
        type: integer
      type:
        type: integer
      updated_at:
        type: integer
    type: object
  model.SysAuthority:
    properties:
      authorityId:
        type: string
      authorityName:
        type: string
      children:
        items:
          $ref: '#/definitions/model.SysAuthority'
        type: array
      createdAt:
        type: string
      dataAuthorityId:
        items:
          $ref: '#/definitions/model.SysAuthority'
        type: array
      defaultRouter:
        type: string
      deletedAt:
        type: string
      menus:
        items:
          $ref: '#/definitions/model.SysBaseMenu'
        type: array
      parentId:
        type: string
      updatedAt:
        type: string
    type: object
  model.SysBaseMenu:
    properties:
      authoritys:
        items:
          $ref: '#/definitions/model.SysAuthority'
        type: array
      children:
        items:
          $ref: '#/definitions/model.SysBaseMenu'
        type: array
      component:
        type: string
      created_at:
        type: integer
      defaultMenu:
        type: boolean
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      hidden:
        type: boolean
      icon:
        type: string
      id:
        type: integer
      keepAlive:
        type: boolean
      name:
        type: string
      parameters:
        items:
          $ref: '#/definitions/model.SysBaseMenuParameter'
        type: array
      parentId:
        type: string
      path:
        type: string
      sort:
        type: integer
      title:
        type: string
      updated_at:
        type: integer
    type: object
  model.SysBaseMenuParameter:
    properties:
      created_at:
        type: integer
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      key:
        type: string
      sysBaseMenuID:
        type: integer
      type:
        type: string
      updated_at:
        type: integer
      value:
        type: string
    type: object
  model.User:
    properties:
      authority:
        $ref: '#/definitions/model.SysAuthority'
      authority_id:
        type: string
      birthday:
        type: integer
      created_at:
        type: integer
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      headerImg:
        type: string
      id:
        type: integer
      mobile:
        type: string
      nick_name:
        type: string
      project_id:
        type: integer
      robot:
        type: integer
      sex:
        type: integer
      status:
        type: integer
      updated_at:
        type: integer
      username:
        type: string
      uuid:
        type: string
    type: object
  request.ChangePasswordStruct:
    properties:
      newPassword:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  request.GetById:
    properties:
      id:
        type: number
    type: object
  request.Header:
    properties:
      access:
        description: 使用网关时，不允许随意访问，得有key
        type: string
      app_version:
        description: app/前端/服务/项目 版本号
        type: string
      auto_ip:
        description: 获取不到请求方IP时，系统自动获取生成
        type: string
      device:
        description: ipad iphone huawei mi chrome firefox ie
        type: string
      device_id:
        description: 设备ID
        type: string
      device_version:
        description: mi8 hongmi7 ios8 ios9 ie8 ie9
        type: string
      dpi:
        description: 分辨率
        type: string
      ip:
        description: 请求方的IP
        type: string
      lat:
        description: 纬度
        type: string
      lon:
        description: 经度
        type: string
      os:
        description: win mac android ios
        type: integer
      os_version:
        description: win7 win9 mac10 android9
        type: string
      project_id:
        description: 项目ID，所有的服务/项目/前端/App，均要先向管理员申请一个账号，才能用于日常请求
        type: integer
      referer:
        description: 页面来源
        type: string
      request_id:
        description: 每次请求的唯一标识，响应时也会返回，如果请求方没有，后端会默认生成一个
        type: string
      source_type:
        description: pc h5 ios android vr spider unknow
        type: integer
      token:
        description: JWT用户登陆令牌
        type: string
      trace_id:
        description: 追踪ID，主要用于链路追踪，如果请求方没有，后端会默认生成一个，跟request略像，但给后端使用
        type: string
    type: object
  request.Login:
    properties:
      app_id:
        type: integer
      captcha:
        type: string
      captchaId:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  request.PageInfo:
    properties:
      page:
        type: integer
      pageSize:
        type: integer
    type: object
  request.SendSMS:
    properties:
      app_id:
        type: string
      code:
        type: string
      mobile:
        type: string
      rule_id:
        type: integer
    type: object
  v1.ParserTokenReq:
    properties:
      token:
        type: string
    type: object
info:
  contact: {}
  description: restful api 工具，模拟客户端请求，方便调试/测试<br/>注：这只是一个工具，不是万能的，像：动态枚举类型、公共请求header、动态常量等<br/>详细的请去
    <a href="http://127.0.0.1:6060" target="_black">godoc</a> 里去查看
  title: z golang 框架
  version: 0.1 测试版
paths:
  /base/captcha:
    get:
      consumes:
      - application/json
      description: 防止有人恶意攻击，尝试破解密码
      parameters:
      - default: "1"
        description: 来源
        in: header
        name: X-Source-Type
        required: true
        type: string
      - default: "6"
        description: 项目ID
        in: header
        name: X-Project-Id
        required: true
        type: string
      - description: 访问KEY
        in: header
        name: X-Access
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httpresponse.Response'
      security:
      - ApiKeyAuth: []
      summary: 生成图片验证码
      tags:
      - Base
  /base/headerStruct:
    get:
      description: 日常header里放一诸如验证类的东西，统一公示出来，方便使用
      parameters:
      - default: "1"
        description: 来源
        in: header
        name: X-Source-Type
        required: true
        type: string
      - default: "6"
        description: 项目ID
        in: header
        name: X-Project-Id
        required: true
        type: string
      - default: imzgoframe
        description: 访问KEY
        in: header
        name: X-Access
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/request.Header'
      summary: header头结构体
      tags:
      - Base
  /base/login:
    post:
      description: 用户登陆，验证，生成token
      parameters:
      - description: 用户名, 密码, 验证码
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.Login'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"登陆成功"}'
          schema:
            type: string
      summary: 用户登陆
      tags:
      - Base
  /base/parserToken:
    post:
      description: 应用接到token后，要到后端再统计认证一下，确保准确
      parameters:
      - description: 需要验证的token值
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/v1.ParserTokenReq'
      - default: "1"
        description: 来源
        in: header
        name: X-Source-Type
        required: true
        type: string
      - default: "6"
        description: 项目ID
        in: header
        name: X-Project-Id
        required: true
        type: string
      - default: imzgoframe
        description: 访问KEY
        in: header
        name: X-Access
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httpresponse.Response'
      summary: 解析一个TOKEN
      tags:
      - Base
  /base/platformList:
    get:
      description: 因为所有请求的hedaer 里必须得，所以动态获取
      parameters:
      - default: "1"
        description: 来源
        in: header
        name: X-Source-Type
        required: true
        type: string
      - default: "6"
        description: 项目ID
        in: header
        name: X-Project-Id
        required: true
        type: string
      - default: imzgoframe
        description: 访问KEY
        in: header
        name: X-Access
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"登陆成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取平台类型列表
      tags:
      - Base
  /base/projectList:
    post:
      description: 每个项目的详细信息
      parameters:
      - default: "1"
        description: 来源
        in: header
        name: X-Source-Type
        required: true
        type: string
      - default: "6"
        description: 项目ID
        in: header
        name: X-Project-Id
        required: true
        type: string
      - default: imzgoframe
        description: 访问KEY
        in: header
        name: X-Access
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Project'
      security:
      - ApiKeyAuth: []
      summary: 项目列表
      tags:
      - Base
  /base/projectTypeList:
    get:
      description: 项目的类型
      parameters:
      - default: "1"
        description: 来源
        in: header
        name: X-Source-Type
        required: true
        type: string
      - default: "6"
        description: 项目ID
        enum:
        - "1"
        - "2"
        - "3"
        - "4"
        in: header
        name: X-Project-Id
        required: true
        type: string
      - default: imzgoframe
        description: 访问KEY
        in: header
        name: X-Access
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"登陆成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 项目的类型
      tags:
      - Base
  /base/register:
    post:
      parameters:
      - description: 用户名, 昵称, 密码, 角色ID ,AppId
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"注册成功"}'
          schema:
            type: string
      summary: 用户注册账号
      tags:
      - Base
  /base/sendSMS:
    post:
      description: 登陆、注册、通知等发送短信
      parameters:
      - description: 手机号, 规则ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.SendSMS'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"发送成功"}'
          schema:
            type: string
      summary: 发送验证码
      tags:
      - Base
  /sys/config:
    post:
      description: Config
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"登陆成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Config
      tags:
      - User
  /sys/quit:
    post:
      description: Quit
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"登陆成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Quit
      tags:
      - User
  /user/changePassword:
    put:
      parameters:
      - description: 用户名, 原密码, 新密码
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.ChangePasswordStruct'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"修改成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用户修改密码
      tags:
      - User
  /user/deleteUser:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 用户ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.GetById'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除用户
      tags:
      - User
  /user/getUserList:
    post:
      consumes:
      - application/json
      parameters:
      - description: 页码, 每页大小
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.PageInfo'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取用户列表
      tags:
      - User
  /user/logout:
    post:
      description: 用户退出
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"退出成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用户退出
      tags:
      - User
  /user/setUserInfo:
    put:
      consumes:
      - application/json
      parameters:
      - description: ID, 用户名, 昵称, 头像链接
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"设置成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 设置用户信息
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: token
    type: apiKey
swagger: "2.0"
