// Code generated by protoc-gen-go. DO NOT EDIT.
// source: frame_sync.proto

package pb // import "./"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RoomBaseInfo struct {
	SourceUid            int32    `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	AddTime              int32    `protobuf:"varint,3,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
	Status               int32    `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Timeout              int32    `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	SequenceNumber       int32    `protobuf:"varint,6,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	RandSeek             int32    `protobuf:"varint,7,opt,name=rand_seek,json=randSeek,proto3" json:"rand_seek,omitempty"`
	PlayerIds            []int32  `protobuf:"varint,8,rep,packed,name=player_ids,json=playerIds,proto3" json:"player_ids,omitempty"`
	RoomId               string   `protobuf:"bytes,9,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	StartTime            int32    `protobuf:"varint,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int32    `protobuf:"varint,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomBaseInfo) Reset()         { *m = RoomBaseInfo{} }
func (m *RoomBaseInfo) String() string { return proto.CompactTextString(m) }
func (*RoomBaseInfo) ProtoMessage()    {}
func (*RoomBaseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{0}
}
func (m *RoomBaseInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomBaseInfo.Unmarshal(m, b)
}
func (m *RoomBaseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomBaseInfo.Marshal(b, m, deterministic)
}
func (dst *RoomBaseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomBaseInfo.Merge(dst, src)
}
func (m *RoomBaseInfo) XXX_Size() int {
	return xxx_messageInfo_RoomBaseInfo.Size(m)
}
func (m *RoomBaseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomBaseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoomBaseInfo proto.InternalMessageInfo

func (m *RoomBaseInfo) GetSourceUid() int32 {
	if m != nil {
		return m.SourceUid
	}
	return 0
}

func (m *RoomBaseInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RoomBaseInfo) GetAddTime() int32 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

func (m *RoomBaseInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RoomBaseInfo) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *RoomBaseInfo) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *RoomBaseInfo) GetRandSeek() int32 {
	if m != nil {
		return m.RandSeek
	}
	return 0
}

func (m *RoomBaseInfo) GetPlayerIds() []int32 {
	if m != nil {
		return m.PlayerIds
	}
	return nil
}

func (m *RoomBaseInfo) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *RoomBaseInfo) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *RoomBaseInfo) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type PlayerBase struct {
	SourceUid            int32    `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	PlayerId             int32    `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerBase) Reset()         { *m = PlayerBase{} }
func (m *PlayerBase) String() string { return proto.CompactTextString(m) }
func (*PlayerBase) ProtoMessage()    {}
func (*PlayerBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{1}
}
func (m *PlayerBase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerBase.Unmarshal(m, b)
}
func (m *PlayerBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerBase.Marshal(b, m, deterministic)
}
func (dst *PlayerBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBase.Merge(dst, src)
}
func (m *PlayerBase) XXX_Size() int {
	return xxx_messageInfo_PlayerBase.Size(m)
}
func (m *PlayerBase) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBase.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBase proto.InternalMessageInfo

func (m *PlayerBase) GetSourceUid() int32 {
	if m != nil {
		return m.SourceUid
	}
	return 0
}

func (m *PlayerBase) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type PlayerState struct {
	PlayerId             int32    `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	AddTime              int32    `protobuf:"varint,2,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
	Status               int32    `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	RoomId               string   `protobuf:"bytes,4,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerState) Reset()         { *m = PlayerState{} }
func (m *PlayerState) String() string { return proto.CompactTextString(m) }
func (*PlayerState) ProtoMessage()    {}
func (*PlayerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{2}
}
func (m *PlayerState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerState.Unmarshal(m, b)
}
func (m *PlayerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerState.Marshal(b, m, deterministic)
}
func (dst *PlayerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerState.Merge(dst, src)
}
func (m *PlayerState) XXX_Size() int {
	return xxx_messageInfo_PlayerState.Size(m)
}
func (m *PlayerState) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerState.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerState proto.InternalMessageInfo

func (m *PlayerState) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerState) GetAddTime() int32 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

func (m *PlayerState) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PlayerState) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

type PlayerResumeGame struct {
	SourceUid            int32    `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	PlayerId             int32    `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	RoomId               string   `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	SequenceNumber       int32    `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerResumeGame) Reset()         { *m = PlayerResumeGame{} }
func (m *PlayerResumeGame) String() string { return proto.CompactTextString(m) }
func (*PlayerResumeGame) ProtoMessage()    {}
func (*PlayerResumeGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{3}
}
func (m *PlayerResumeGame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerResumeGame.Unmarshal(m, b)
}
func (m *PlayerResumeGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerResumeGame.Marshal(b, m, deterministic)
}
func (dst *PlayerResumeGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerResumeGame.Merge(dst, src)
}
func (m *PlayerResumeGame) XXX_Size() int {
	return xxx_messageInfo_PlayerResumeGame.Size(m)
}
func (m *PlayerResumeGame) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerResumeGame.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerResumeGame proto.InternalMessageInfo

func (m *PlayerResumeGame) GetSourceUid() int32 {
	if m != nil {
		return m.SourceUid
	}
	return 0
}

func (m *PlayerResumeGame) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerResumeGame) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *PlayerResumeGame) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

type PlayerReady struct {
	SourceUid            int32    `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	PlayerId             int32    `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	RoomId               string   `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerReady) Reset()         { *m = PlayerReady{} }
func (m *PlayerReady) String() string { return proto.CompactTextString(m) }
func (*PlayerReady) ProtoMessage()    {}
func (*PlayerReady) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{4}
}
func (m *PlayerReady) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerReady.Unmarshal(m, b)
}
func (m *PlayerReady) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerReady.Marshal(b, m, deterministic)
}
func (dst *PlayerReady) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerReady.Merge(dst, src)
}
func (m *PlayerReady) XXX_Size() int {
	return xxx_messageInfo_PlayerReady.Size(m)
}
func (m *PlayerReady) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerReady.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerReady proto.InternalMessageInfo

func (m *PlayerReady) GetSourceUid() int32 {
	if m != nil {
		return m.SourceUid
	}
	return 0
}

func (m *PlayerReady) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerReady) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

type ReqRoomHistory struct {
	SourceUid            int32    `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	PlayerId             int32    `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	RoomId               string   `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	SequenceNumberStart  int32    `protobuf:"varint,4,opt,name=sequence_numberStart,json=sequenceNumberStart,proto3" json:"sequence_numberStart,omitempty"`
	SequenceNumberEnd    int32    `protobuf:"varint,5,opt,name=sequence_numberEnd,json=sequenceNumberEnd,proto3" json:"sequence_numberEnd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqRoomHistory) Reset()         { *m = ReqRoomHistory{} }
func (m *ReqRoomHistory) String() string { return proto.CompactTextString(m) }
func (*ReqRoomHistory) ProtoMessage()    {}
func (*ReqRoomHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{5}
}
func (m *ReqRoomHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqRoomHistory.Unmarshal(m, b)
}
func (m *ReqRoomHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqRoomHistory.Marshal(b, m, deterministic)
}
func (dst *ReqRoomHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqRoomHistory.Merge(dst, src)
}
func (m *ReqRoomHistory) XXX_Size() int {
	return xxx_messageInfo_ReqRoomHistory.Size(m)
}
func (m *ReqRoomHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqRoomHistory.DiscardUnknown(m)
}

var xxx_messageInfo_ReqRoomHistory proto.InternalMessageInfo

func (m *ReqRoomHistory) GetSourceUid() int32 {
	if m != nil {
		return m.SourceUid
	}
	return 0
}

func (m *ReqRoomHistory) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *ReqRoomHistory) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *ReqRoomHistory) GetSequenceNumberStart() int32 {
	if m != nil {
		return m.SequenceNumberStart
	}
	return 0
}

func (m *ReqRoomHistory) GetSequenceNumberEnd() int32 {
	if m != nil {
		return m.SequenceNumberEnd
	}
	return 0
}

type RoomHistorySets struct {
	SourceUid            int32          `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	Sets                 []*RoomHistory `protobuf:"bytes,2,rep,name=Sets,proto3" json:"Sets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RoomHistorySets) Reset()         { *m = RoomHistorySets{} }
func (m *RoomHistorySets) String() string { return proto.CompactTextString(m) }
func (*RoomHistorySets) ProtoMessage()    {}
func (*RoomHistorySets) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{6}
}
func (m *RoomHistorySets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomHistorySets.Unmarshal(m, b)
}
func (m *RoomHistorySets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomHistorySets.Marshal(b, m, deterministic)
}
func (dst *RoomHistorySets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomHistorySets.Merge(dst, src)
}
func (m *RoomHistorySets) XXX_Size() int {
	return xxx_messageInfo_RoomHistorySets.Size(m)
}
func (m *RoomHistorySets) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomHistorySets.DiscardUnknown(m)
}

var xxx_messageInfo_RoomHistorySets proto.InternalMessageInfo

func (m *RoomHistorySets) GetSourceUid() int32 {
	if m != nil {
		return m.SourceUid
	}
	return 0
}

func (m *RoomHistorySets) GetSets() []*RoomHistory {
	if m != nil {
		return m.Sets
	}
	return nil
}

type RoomHistory struct {
	SourceUid            int32    `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Action               string   `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Content              string   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomHistory) Reset()         { *m = RoomHistory{} }
func (m *RoomHistory) String() string { return proto.CompactTextString(m) }
func (*RoomHistory) ProtoMessage()    {}
func (*RoomHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{7}
}
func (m *RoomHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomHistory.Unmarshal(m, b)
}
func (m *RoomHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomHistory.Marshal(b, m, deterministic)
}
func (dst *RoomHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomHistory.Merge(dst, src)
}
func (m *RoomHistory) XXX_Size() int {
	return xxx_messageInfo_RoomHistory.Size(m)
}
func (m *RoomHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomHistory.DiscardUnknown(m)
}

var xxx_messageInfo_RoomHistory proto.InternalMessageInfo

func (m *RoomHistory) GetSourceUid() int32 {
	if m != nil {
		return m.SourceUid
	}
	return 0
}

func (m *RoomHistory) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoomHistory) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *RoomHistory) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type GameOver struct {
	SourceUid            int32    `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	PlayerId             int32    `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	RoomId               string   `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	SequenceNumber       int32    `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Result               string   `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameOver) Reset()         { *m = GameOver{} }
func (m *GameOver) String() string { return proto.CompactTextString(m) }
func (*GameOver) ProtoMessage()    {}
func (*GameOver) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{8}
}
func (m *GameOver) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameOver.Unmarshal(m, b)
}
func (m *GameOver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameOver.Marshal(b, m, deterministic)
}
func (dst *GameOver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameOver.Merge(dst, src)
}
func (m *GameOver) XXX_Size() int {
	return xxx_messageInfo_GameOver.Size(m)
}
func (m *GameOver) XXX_DiscardUnknown() {
	xxx_messageInfo_GameOver.DiscardUnknown(m)
}

var xxx_messageInfo_GameOver proto.InternalMessageInfo

func (m *GameOver) GetSourceUid() int32 {
	if m != nil {
		return m.SourceUid
	}
	return 0
}

func (m *GameOver) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *GameOver) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *GameOver) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *GameOver) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type PlayerOver struct {
	SourceUid            int32    `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	PlayerId             int32    `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	SequenceNumber       int32    `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	RoomId               string   `protobuf:"bytes,4,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerOver) Reset()         { *m = PlayerOver{} }
func (m *PlayerOver) String() string { return proto.CompactTextString(m) }
func (*PlayerOver) ProtoMessage()    {}
func (*PlayerOver) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{9}
}
func (m *PlayerOver) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerOver.Unmarshal(m, b)
}
func (m *PlayerOver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerOver.Marshal(b, m, deterministic)
}
func (dst *PlayerOver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerOver.Merge(dst, src)
}
func (m *PlayerOver) XXX_Size() int {
	return xxx_messageInfo_PlayerOver.Size(m)
}
func (m *PlayerOver) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerOver.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerOver proto.InternalMessageInfo

func (m *PlayerOver) GetSourceUid() int32 {
	if m != nil {
		return m.SourceUid
	}
	return 0
}

func (m *PlayerOver) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerOver) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *PlayerOver) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

type OtherPlayerOffline struct {
	SourceUid            int32    `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	PlayerId             int32    `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OtherPlayerOffline) Reset()         { *m = OtherPlayerOffline{} }
func (m *OtherPlayerOffline) String() string { return proto.CompactTextString(m) }
func (*OtherPlayerOffline) ProtoMessage()    {}
func (*OtherPlayerOffline) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{10}
}
func (m *OtherPlayerOffline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OtherPlayerOffline.Unmarshal(m, b)
}
func (m *OtherPlayerOffline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OtherPlayerOffline.Marshal(b, m, deterministic)
}
func (dst *OtherPlayerOffline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OtherPlayerOffline.Merge(dst, src)
}
func (m *OtherPlayerOffline) XXX_Size() int {
	return xxx_messageInfo_OtherPlayerOffline.Size(m)
}
func (m *OtherPlayerOffline) XXX_DiscardUnknown() {
	xxx_messageInfo_OtherPlayerOffline.DiscardUnknown(m)
}

var xxx_messageInfo_OtherPlayerOffline proto.InternalMessageInfo

func (m *OtherPlayerOffline) GetSourceUid() int32 {
	if m != nil {
		return m.SourceUid
	}
	return 0
}

func (m *OtherPlayerOffline) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type StartBattle struct {
	SourceUid            int32    `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	SequenceNumberStart  int32    `protobuf:"varint,2,opt,name=sequence_number_start,json=sequenceNumberStart,proto3" json:"sequence_number_start,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartBattle) Reset()         { *m = StartBattle{} }
func (m *StartBattle) String() string { return proto.CompactTextString(m) }
func (*StartBattle) ProtoMessage()    {}
func (*StartBattle) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{11}
}
func (m *StartBattle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartBattle.Unmarshal(m, b)
}
func (m *StartBattle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartBattle.Marshal(b, m, deterministic)
}
func (dst *StartBattle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartBattle.Merge(dst, src)
}
func (m *StartBattle) XXX_Size() int {
	return xxx_messageInfo_StartBattle.Size(m)
}
func (m *StartBattle) XXX_DiscardUnknown() {
	xxx_messageInfo_StartBattle.DiscardUnknown(m)
}

var xxx_messageInfo_StartBattle proto.InternalMessageInfo

func (m *StartBattle) GetSourceUid() int32 {
	if m != nil {
		return m.SourceUid
	}
	return 0
}

func (m *StartBattle) GetSequenceNumberStart() int32 {
	if m != nil {
		return m.SequenceNumberStart
	}
	return 0
}

type EnterBattle struct {
	SourceUid            int32    `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	RandSeek             int32    `protobuf:"varint,2,opt,name=rand_seek,json=randSeek,proto3" json:"rand_seek,omitempty"`
	RoomId               string   `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	SequenceNumber       int32    `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Status               int32    `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	AddTime              int32    `protobuf:"varint,6,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
	Time                 int64    `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`
	UdpPort              string   `protobuf:"bytes,8,opt,name=udp_port,json=udpPort,proto3" json:"udp_port,omitempty"`
	PlayerIds            []int32  `protobuf:"varint,9,rep,packed,name=player_ids,json=playerIds,proto3" json:"player_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnterBattle) Reset()         { *m = EnterBattle{} }
func (m *EnterBattle) String() string { return proto.CompactTextString(m) }
func (*EnterBattle) ProtoMessage()    {}
func (*EnterBattle) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{12}
}
func (m *EnterBattle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnterBattle.Unmarshal(m, b)
}
func (m *EnterBattle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnterBattle.Marshal(b, m, deterministic)
}
func (dst *EnterBattle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterBattle.Merge(dst, src)
}
func (m *EnterBattle) XXX_Size() int {
	return xxx_messageInfo_EnterBattle.Size(m)
}
func (m *EnterBattle) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterBattle.DiscardUnknown(m)
}

var xxx_messageInfo_EnterBattle proto.InternalMessageInfo

func (m *EnterBattle) GetSourceUid() int32 {
	if m != nil {
		return m.SourceUid
	}
	return 0
}

func (m *EnterBattle) GetRandSeek() int32 {
	if m != nil {
		return m.RandSeek
	}
	return 0
}

func (m *EnterBattle) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *EnterBattle) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *EnterBattle) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *EnterBattle) GetAddTime() int32 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

func (m *EnterBattle) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *EnterBattle) GetUdpPort() string {
	if m != nil {
		return m.UdpPort
	}
	return ""
}

func (m *EnterBattle) GetPlayerIds() []int32 {
	if m != nil {
		return m.PlayerIds
	}
	return nil
}

type LogicFrame struct {
	SourceUid            int32        `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	Id                   int32        `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	RoomId               string       `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	SequenceNumber       int32        `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Operations           []*Operation `protobuf:"bytes,5,rep,name=operations,proto3" json:"operations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *LogicFrame) Reset()         { *m = LogicFrame{} }
func (m *LogicFrame) String() string { return proto.CompactTextString(m) }
func (*LogicFrame) ProtoMessage()    {}
func (*LogicFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{13}
}
func (m *LogicFrame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicFrame.Unmarshal(m, b)
}
func (m *LogicFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicFrame.Marshal(b, m, deterministic)
}
func (dst *LogicFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicFrame.Merge(dst, src)
}
func (m *LogicFrame) XXX_Size() int {
	return xxx_messageInfo_LogicFrame.Size(m)
}
func (m *LogicFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicFrame.DiscardUnknown(m)
}

var xxx_messageInfo_LogicFrame proto.InternalMessageInfo

func (m *LogicFrame) GetSourceUid() int32 {
	if m != nil {
		return m.SourceUid
	}
	return 0
}

func (m *LogicFrame) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogicFrame) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *LogicFrame) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *LogicFrame) GetOperations() []*Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

type Operation struct {
	SourceUid            int32    `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Event                string   `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	Value                string   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	PlayerId             int32    `protobuf:"varint,5,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{14}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Operation.Unmarshal(m, b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
}
func (dst *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(dst, src)
}
func (m *Operation) XXX_Size() int {
	return xxx_messageInfo_Operation.Size(m)
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

func (m *Operation) GetSourceUid() int32 {
	if m != nil {
		return m.SourceUid
	}
	return 0
}

func (m *Operation) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Operation) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *Operation) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Operation) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type ReadyTimeout struct {
	SourceUid            int32    `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	RoomId               string   `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadyTimeout) Reset()         { *m = ReadyTimeout{} }
func (m *ReadyTimeout) String() string { return proto.CompactTextString(m) }
func (*ReadyTimeout) ProtoMessage()    {}
func (*ReadyTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{15}
}
func (m *ReadyTimeout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadyTimeout.Unmarshal(m, b)
}
func (m *ReadyTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadyTimeout.Marshal(b, m, deterministic)
}
func (dst *ReadyTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadyTimeout.Merge(dst, src)
}
func (m *ReadyTimeout) XXX_Size() int {
	return xxx_messageInfo_ReadyTimeout.Size(m)
}
func (m *ReadyTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadyTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_ReadyTimeout proto.InternalMessageInfo

func (m *ReadyTimeout) GetSourceUid() int32 {
	if m != nil {
		return m.SourceUid
	}
	return 0
}

func (m *ReadyTimeout) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

type RestartGame struct {
	SourceUid            int32    `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	RoomId               string   `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	PlayerIds            []int32  `protobuf:"varint,3,rep,packed,name=player_ids,json=playerIds,proto3" json:"player_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartGame) Reset()         { *m = RestartGame{} }
func (m *RestartGame) String() string { return proto.CompactTextString(m) }
func (*RestartGame) ProtoMessage()    {}
func (*RestartGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_frame_sync_2d24a41d83821299, []int{16}
}
func (m *RestartGame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartGame.Unmarshal(m, b)
}
func (m *RestartGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartGame.Marshal(b, m, deterministic)
}
func (dst *RestartGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartGame.Merge(dst, src)
}
func (m *RestartGame) XXX_Size() int {
	return xxx_messageInfo_RestartGame.Size(m)
}
func (m *RestartGame) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartGame.DiscardUnknown(m)
}

var xxx_messageInfo_RestartGame proto.InternalMessageInfo

func (m *RestartGame) GetSourceUid() int32 {
	if m != nil {
		return m.SourceUid
	}
	return 0
}

func (m *RestartGame) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *RestartGame) GetPlayerIds() []int32 {
	if m != nil {
		return m.PlayerIds
	}
	return nil
}

func init() {
	proto.RegisterType((*RoomBaseInfo)(nil), "pb.RoomBaseInfo")
	proto.RegisterType((*PlayerBase)(nil), "pb.PlayerBase")
	proto.RegisterType((*PlayerState)(nil), "pb.PlayerState")
	proto.RegisterType((*PlayerResumeGame)(nil), "pb.PlayerResumeGame")
	proto.RegisterType((*PlayerReady)(nil), "pb.PlayerReady")
	proto.RegisterType((*ReqRoomHistory)(nil), "pb.ReqRoomHistory")
	proto.RegisterType((*RoomHistorySets)(nil), "pb.RoomHistorySets")
	proto.RegisterType((*RoomHistory)(nil), "pb.RoomHistory")
	proto.RegisterType((*GameOver)(nil), "pb.GameOver")
	proto.RegisterType((*PlayerOver)(nil), "pb.PlayerOver")
	proto.RegisterType((*OtherPlayerOffline)(nil), "pb.OtherPlayerOffline")
	proto.RegisterType((*StartBattle)(nil), "pb.StartBattle")
	proto.RegisterType((*EnterBattle)(nil), "pb.EnterBattle")
	proto.RegisterType((*LogicFrame)(nil), "pb.LogicFrame")
	proto.RegisterType((*Operation)(nil), "pb.Operation")
	proto.RegisterType((*ReadyTimeout)(nil), "pb.ReadyTimeout")
	proto.RegisterType((*RestartGame)(nil), "pb.RestartGame")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FrameSyncClient is the client API for FrameSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrameSyncClient interface {
	CS_PlayerReady(ctx context.Context, in *PlayerReady, opts ...grpc.CallOption) (*Empty, error)
	CS_PlayerOperations(ctx context.Context, in *LogicFrame, opts ...grpc.CallOption) (*Empty, error)
	CS_PlayerResumeGame(ctx context.Context, in *PlayerResumeGame, opts ...grpc.CallOption) (*Empty, error)
	CS_PlayerOver(ctx context.Context, in *PlayerOver, opts ...grpc.CallOption) (*Empty, error)
	CS_RoomHistory(ctx context.Context, in *ReqRoomHistory, opts ...grpc.CallOption) (*Empty, error)
	CS_RoomBaseInfo(ctx context.Context, in *RoomBaseInfo, opts ...grpc.CallOption) (*Empty, error)
	CS_PlayerState(ctx context.Context, in *PlayerBase, opts ...grpc.CallOption) (*Empty, error)
	CS_Heartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*Empty, error)
	SC_ReadyTimeout(ctx context.Context, in *ReadyTimeout, opts ...grpc.CallOption) (*Empty, error)
	SC_EnterBattle(ctx context.Context, in *EnterBattle, opts ...grpc.CallOption) (*Empty, error)
	SC_LogicFrame(ctx context.Context, in *LogicFrame, opts ...grpc.CallOption) (*Empty, error)
	SC_RoomHistory(ctx context.Context, in *RoomHistorySets, opts ...grpc.CallOption) (*Empty, error)
	SC_RoomBaseInfo(ctx context.Context, in *RoomBaseInfo, opts ...grpc.CallOption) (*Empty, error)
	SC_OtherPlayerOffline(ctx context.Context, in *OtherPlayerOffline, opts ...grpc.CallOption) (*Empty, error)
	SC_OtherPlayerOver(ctx context.Context, in *PlayerOver, opts ...grpc.CallOption) (*Empty, error)
	SC_OtherPlayerResumeGame(ctx context.Context, in *PlayerResumeGame, opts ...grpc.CallOption) (*Empty, error)
	SC_StartBattle(ctx context.Context, in *StartBattle, opts ...grpc.CallOption) (*Empty, error)
	SC_RestartGame(ctx context.Context, in *RestartGame, opts ...grpc.CallOption) (*Empty, error)
	SC_GameOver(ctx context.Context, in *GameOver, opts ...grpc.CallOption) (*Empty, error)
	SC_PlayerState(ctx context.Context, in *PlayerState, opts ...grpc.CallOption) (*Empty, error)
	SC_Heartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*Empty, error)
	FdClose(ctx context.Context, in *FDCloseEvent, opts ...grpc.CallOption) (*Empty, error)
	FdCreate(ctx context.Context, in *FDCreateEvent, opts ...grpc.CallOption) (*Empty, error)
}

type frameSyncClient struct {
	cc *grpc.ClientConn
}

func NewFrameSyncClient(cc *grpc.ClientConn) FrameSyncClient {
	return &frameSyncClient{cc}
}

func (c *frameSyncClient) CS_PlayerReady(ctx context.Context, in *PlayerReady, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/CS_PlayerReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) CS_PlayerOperations(ctx context.Context, in *LogicFrame, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/CS_PlayerOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) CS_PlayerResumeGame(ctx context.Context, in *PlayerResumeGame, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/CS_PlayerResumeGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) CS_PlayerOver(ctx context.Context, in *PlayerOver, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/CS_PlayerOver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) CS_RoomHistory(ctx context.Context, in *ReqRoomHistory, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/CS_RoomHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) CS_RoomBaseInfo(ctx context.Context, in *RoomBaseInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/CS_RoomBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) CS_PlayerState(ctx context.Context, in *PlayerBase, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/CS_PlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) CS_Heartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/CS_Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_ReadyTimeout(ctx context.Context, in *ReadyTimeout, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_ReadyTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_EnterBattle(ctx context.Context, in *EnterBattle, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_EnterBattle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_LogicFrame(ctx context.Context, in *LogicFrame, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_LogicFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_RoomHistory(ctx context.Context, in *RoomHistorySets, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_RoomHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_RoomBaseInfo(ctx context.Context, in *RoomBaseInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_RoomBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_OtherPlayerOffline(ctx context.Context, in *OtherPlayerOffline, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_OtherPlayerOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_OtherPlayerOver(ctx context.Context, in *PlayerOver, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_OtherPlayerOver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_OtherPlayerResumeGame(ctx context.Context, in *PlayerResumeGame, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_OtherPlayerResumeGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_StartBattle(ctx context.Context, in *StartBattle, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_StartBattle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_RestartGame(ctx context.Context, in *RestartGame, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_RestartGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_GameOver(ctx context.Context, in *GameOver, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_GameOver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_PlayerState(ctx context.Context, in *PlayerState, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_PlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_Heartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) FdClose(ctx context.Context, in *FDCloseEvent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/FdClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) FdCreate(ctx context.Context, in *FDCreateEvent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/FdCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrameSyncServer is the server API for FrameSync service.
type FrameSyncServer interface {
	CS_PlayerReady(context.Context, *PlayerReady) (*Empty, error)
	CS_PlayerOperations(context.Context, *LogicFrame) (*Empty, error)
	CS_PlayerResumeGame(context.Context, *PlayerResumeGame) (*Empty, error)
	CS_PlayerOver(context.Context, *PlayerOver) (*Empty, error)
	CS_RoomHistory(context.Context, *ReqRoomHistory) (*Empty, error)
	CS_RoomBaseInfo(context.Context, *RoomBaseInfo) (*Empty, error)
	CS_PlayerState(context.Context, *PlayerBase) (*Empty, error)
	CS_Heartbeat(context.Context, *Heartbeat) (*Empty, error)
	SC_ReadyTimeout(context.Context, *ReadyTimeout) (*Empty, error)
	SC_EnterBattle(context.Context, *EnterBattle) (*Empty, error)
	SC_LogicFrame(context.Context, *LogicFrame) (*Empty, error)
	SC_RoomHistory(context.Context, *RoomHistorySets) (*Empty, error)
	SC_RoomBaseInfo(context.Context, *RoomBaseInfo) (*Empty, error)
	SC_OtherPlayerOffline(context.Context, *OtherPlayerOffline) (*Empty, error)
	SC_OtherPlayerOver(context.Context, *PlayerOver) (*Empty, error)
	SC_OtherPlayerResumeGame(context.Context, *PlayerResumeGame) (*Empty, error)
	SC_StartBattle(context.Context, *StartBattle) (*Empty, error)
	SC_RestartGame(context.Context, *RestartGame) (*Empty, error)
	SC_GameOver(context.Context, *GameOver) (*Empty, error)
	SC_PlayerState(context.Context, *PlayerState) (*Empty, error)
	SC_Heartbeat(context.Context, *Heartbeat) (*Empty, error)
	FdClose(context.Context, *FDCloseEvent) (*Empty, error)
	FdCreate(context.Context, *FDCreateEvent) (*Empty, error)
}

func RegisterFrameSyncServer(s *grpc.Server, srv FrameSyncServer) {
	s.RegisterService(&_FrameSync_serviceDesc, srv)
}

func _FrameSync_CS_PlayerReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerReady)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).CS_PlayerReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/CS_PlayerReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).CS_PlayerReady(ctx, req.(*PlayerReady))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_CS_PlayerOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).CS_PlayerOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/CS_PlayerOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).CS_PlayerOperations(ctx, req.(*LogicFrame))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_CS_PlayerResumeGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerResumeGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).CS_PlayerResumeGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/CS_PlayerResumeGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).CS_PlayerResumeGame(ctx, req.(*PlayerResumeGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_CS_PlayerOver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerOver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).CS_PlayerOver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/CS_PlayerOver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).CS_PlayerOver(ctx, req.(*PlayerOver))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_CS_RoomHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRoomHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).CS_RoomHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/CS_RoomHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).CS_RoomHistory(ctx, req.(*ReqRoomHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_CS_RoomBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomBaseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).CS_RoomBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/CS_RoomBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).CS_RoomBaseInfo(ctx, req.(*RoomBaseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_CS_PlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).CS_PlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/CS_PlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).CS_PlayerState(ctx, req.(*PlayerBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_CS_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Heartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).CS_Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/CS_Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).CS_Heartbeat(ctx, req.(*Heartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_ReadyTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyTimeout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_ReadyTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_ReadyTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_ReadyTimeout(ctx, req.(*ReadyTimeout))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_EnterBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterBattle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_EnterBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_EnterBattle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_EnterBattle(ctx, req.(*EnterBattle))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_LogicFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_LogicFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_LogicFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_LogicFrame(ctx, req.(*LogicFrame))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_RoomHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomHistorySets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_RoomHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_RoomHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_RoomHistory(ctx, req.(*RoomHistorySets))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_RoomBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomBaseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_RoomBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_RoomBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_RoomBaseInfo(ctx, req.(*RoomBaseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_OtherPlayerOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtherPlayerOffline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_OtherPlayerOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_OtherPlayerOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_OtherPlayerOffline(ctx, req.(*OtherPlayerOffline))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_OtherPlayerOver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerOver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_OtherPlayerOver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_OtherPlayerOver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_OtherPlayerOver(ctx, req.(*PlayerOver))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_OtherPlayerResumeGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerResumeGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_OtherPlayerResumeGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_OtherPlayerResumeGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_OtherPlayerResumeGame(ctx, req.(*PlayerResumeGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_StartBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBattle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_StartBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_StartBattle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_StartBattle(ctx, req.(*StartBattle))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_RestartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_RestartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_RestartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_RestartGame(ctx, req.(*RestartGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_GameOver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameOver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_GameOver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_GameOver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_GameOver(ctx, req.(*GameOver))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_PlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_PlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_PlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_PlayerState(ctx, req.(*PlayerState))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Heartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_Heartbeat(ctx, req.(*Heartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_FdClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FDCloseEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).FdClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/FdClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).FdClose(ctx, req.(*FDCloseEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_FdCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FDCreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).FdCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/FdCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).FdCreate(ctx, req.(*FDCreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrameSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FrameSync",
	HandlerType: (*FrameSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CS_PlayerReady",
			Handler:    _FrameSync_CS_PlayerReady_Handler,
		},
		{
			MethodName: "CS_PlayerOperations",
			Handler:    _FrameSync_CS_PlayerOperations_Handler,
		},
		{
			MethodName: "CS_PlayerResumeGame",
			Handler:    _FrameSync_CS_PlayerResumeGame_Handler,
		},
		{
			MethodName: "CS_PlayerOver",
			Handler:    _FrameSync_CS_PlayerOver_Handler,
		},
		{
			MethodName: "CS_RoomHistory",
			Handler:    _FrameSync_CS_RoomHistory_Handler,
		},
		{
			MethodName: "CS_RoomBaseInfo",
			Handler:    _FrameSync_CS_RoomBaseInfo_Handler,
		},
		{
			MethodName: "CS_PlayerState",
			Handler:    _FrameSync_CS_PlayerState_Handler,
		},
		{
			MethodName: "CS_Heartbeat",
			Handler:    _FrameSync_CS_Heartbeat_Handler,
		},
		{
			MethodName: "SC_ReadyTimeout",
			Handler:    _FrameSync_SC_ReadyTimeout_Handler,
		},
		{
			MethodName: "SC_EnterBattle",
			Handler:    _FrameSync_SC_EnterBattle_Handler,
		},
		{
			MethodName: "SC_LogicFrame",
			Handler:    _FrameSync_SC_LogicFrame_Handler,
		},
		{
			MethodName: "SC_RoomHistory",
			Handler:    _FrameSync_SC_RoomHistory_Handler,
		},
		{
			MethodName: "SC_RoomBaseInfo",
			Handler:    _FrameSync_SC_RoomBaseInfo_Handler,
		},
		{
			MethodName: "SC_OtherPlayerOffline",
			Handler:    _FrameSync_SC_OtherPlayerOffline_Handler,
		},
		{
			MethodName: "SC_OtherPlayerOver",
			Handler:    _FrameSync_SC_OtherPlayerOver_Handler,
		},
		{
			MethodName: "SC_OtherPlayerResumeGame",
			Handler:    _FrameSync_SC_OtherPlayerResumeGame_Handler,
		},
		{
			MethodName: "SC_StartBattle",
			Handler:    _FrameSync_SC_StartBattle_Handler,
		},
		{
			MethodName: "SC_RestartGame",
			Handler:    _FrameSync_SC_RestartGame_Handler,
		},
		{
			MethodName: "SC_GameOver",
			Handler:    _FrameSync_SC_GameOver_Handler,
		},
		{
			MethodName: "SC_PlayerState",
			Handler:    _FrameSync_SC_PlayerState_Handler,
		},
		{
			MethodName: "SC_Heartbeat",
			Handler:    _FrameSync_SC_Heartbeat_Handler,
		},
		{
			MethodName: "FdClose",
			Handler:    _FrameSync_FdClose_Handler,
		},
		{
			MethodName: "FdCreate",
			Handler:    _FrameSync_FdCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frame_sync.proto",
}

func init() { proto.RegisterFile("frame_sync.proto", fileDescriptor_frame_sync_2d24a41d83821299) }

var fileDescriptor_frame_sync_2d24a41d83821299 = []byte{
	// 1040 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x4e, 0xf3, 0xef, 0x25, 0x9b, 0x76, 0xa7, 0xdd, 0xe2, 0xdd, 0x15, 0x52, 0x65, 0x0e,
	0x44, 0x88, 0x06, 0x36, 0x5c, 0x90, 0x80, 0x4b, 0x4d, 0x42, 0x2b, 0x21, 0x5a, 0xd9, 0xbb, 0x17,
	0x2e, 0xc6, 0xc9, 0x4c, 0xc1, 0xda, 0xd8, 0xe3, 0x1d, 0x8f, 0x2b, 0xe5, 0xcc, 0x0d, 0x71, 0xe0,
	0x23, 0xf0, 0x01, 0xf8, 0x14, 0x5c, 0xf8, 0x4c, 0xdc, 0xd0, 0xcc, 0xd8, 0xc9, 0x8c, 0x93, 0x92,
	0x56, 0x65, 0xb5, 0xb7, 0xbc, 0xe7, 0xf7, 0x66, 0xde, 0xfb, 0xbd, 0xf7, 0x7e, 0x6f, 0x02, 0x07,
	0xd7, 0x2c, 0x4a, 0x48, 0x98, 0x2f, 0xd3, 0xf9, 0x28, 0x63, 0x94, 0x53, 0x64, 0x67, 0xb3, 0x67,
	0xfd, 0x39, 0x4d, 0x12, 0x9a, 0x2a, 0x8d, 0xfb, 0x97, 0x0d, 0x7d, 0x9f, 0xd2, 0xe4, 0x2c, 0xca,
	0xc9, 0x45, 0x7a, 0x4d, 0xd1, 0x07, 0x00, 0x39, 0x2d, 0xd8, 0x9c, 0x84, 0x45, 0x8c, 0x1d, 0xeb,
	0xc4, 0x1a, 0x36, 0xfd, 0xae, 0xd2, 0xbc, 0x8a, 0x31, 0x1a, 0x80, 0x1d, 0x63, 0xc7, 0x3e, 0xb1,
	0x86, 0x5d, 0xdf, 0x8e, 0x31, 0x7a, 0x0a, 0x9d, 0x08, 0xe3, 0x90, 0xc7, 0x09, 0x71, 0x1a, 0xd2,
	0xb8, 0x1d, 0x61, 0xfc, 0x32, 0x4e, 0x08, 0x3a, 0x86, 0x56, 0xce, 0x23, 0x5e, 0xe4, 0xce, 0x9e,
	0xfc, 0x50, 0x4a, 0xc8, 0x81, 0xb6, 0x30, 0xa7, 0x05, 0x77, 0x9a, 0xca, 0xa3, 0x14, 0xd1, 0x47,
	0xb0, 0x9f, 0x93, 0x37, 0x05, 0x49, 0xe7, 0x24, 0x4c, 0x8b, 0x64, 0x46, 0x98, 0xd3, 0x92, 0x16,
	0x83, 0x4a, 0xfd, 0xbd, 0xd4, 0xa2, 0xe7, 0xd0, 0x65, 0x51, 0x8a, 0xc3, 0x9c, 0x90, 0xd7, 0x4e,
	0x5b, 0x9a, 0x74, 0x84, 0x22, 0x20, 0xe4, 0xb5, 0xc8, 0x20, 0x5b, 0x44, 0x4b, 0xc2, 0xc2, 0x18,
	0xe7, 0x4e, 0xe7, 0xa4, 0x21, 0x32, 0x50, 0x9a, 0x0b, 0x9c, 0xa3, 0xf7, 0xa1, 0xcd, 0x28, 0x4d,
	0xc2, 0x18, 0x3b, 0x5d, 0x99, 0x46, 0x4b, 0x88, 0x17, 0x58, 0x66, 0xce, 0x23, 0xc6, 0x55, 0x32,
	0x50, 0x66, 0x2e, 0x34, 0x32, 0x9d, 0xa7, 0xd0, 0x21, 0x69, 0x99, 0x69, 0x4f, 0xc5, 0x4d, 0x52,
	0x99, 0xa9, 0x7b, 0x0e, 0x70, 0x25, 0xcf, 0x17, 0x28, 0xee, 0x42, 0xf0, 0x39, 0x74, 0x57, 0xe1,
	0x49, 0x20, 0x9b, 0x7e, 0xa7, 0x8a, 0xce, 0xbd, 0x81, 0x9e, 0x3a, 0x29, 0xe0, 0x11, 0x27, 0xa6,
	0xad, 0x65, 0xda, 0x1a, 0xd0, 0xdb, 0xb7, 0x41, 0xdf, 0x30, 0xa0, 0xd7, 0x72, 0xdf, 0xd3, 0x73,
	0x77, 0x7f, 0xb7, 0xe0, 0x40, 0x5d, 0xec, 0x93, 0xbc, 0x48, 0xc8, 0xb7, 0x51, 0xf2, 0xa0, 0x44,
	0xf4, 0x9b, 0x1a, 0x06, 0xca, 0x5b, 0x6a, 0xbc, 0xb7, 0xad, 0xc6, 0xee, 0xac, 0x82, 0xc2, 0x27,
	0x11, 0x5e, 0xbe, 0x95, 0x60, 0xdc, 0xbf, 0x2d, 0x18, 0xf8, 0xe4, 0x8d, 0x18, 0x80, 0xf3, 0x38,
	0xe7, 0x94, 0xbd, 0x9d, 0x7b, 0xd0, 0x0b, 0x38, 0xaa, 0x25, 0x1d, 0x88, 0xbe, 0x2a, 0x33, 0x3f,
	0x34, 0x33, 0x97, 0x9f, 0xd0, 0x29, 0xa0, 0x9a, 0xcb, 0x24, 0xc5, 0xe5, 0xc0, 0x3c, 0x36, 0x1d,
	0x26, 0x29, 0x76, 0x5f, 0xc1, 0xbe, 0x96, 0x45, 0x40, 0x78, 0xbe, 0x2b, 0x93, 0x0f, 0x61, 0x4f,
	0x98, 0x39, 0xf6, 0x49, 0x63, 0xd8, 0x1b, 0xef, 0x8f, 0xb2, 0xd9, 0x48, 0x3b, 0xc1, 0x97, 0x1f,
	0xdd, 0x14, 0x7a, 0xf7, 0x00, 0x67, 0x4d, 0x0e, 0x4d, 0x49, 0x0e, 0xc7, 0xd0, 0x8a, 0xe6, 0x3c,
	0xa6, 0x69, 0x05, 0x87, 0x92, 0x04, 0x03, 0xcc, 0x69, 0xca, 0x49, 0xca, 0xcb, 0x36, 0xac, 0x44,
	0xf7, 0x0f, 0x0b, 0x3a, 0xa2, 0xf7, 0x2e, 0x6f, 0x08, 0x7b, 0xb7, 0xfd, 0x27, 0x82, 0x67, 0x24,
	0x2f, 0x16, 0x8a, 0xa5, 0xc4, 0x01, 0x52, 0x72, 0x7f, 0xb5, 0xaa, 0x69, 0x7f, 0x70, 0x90, 0x5b,
	0x62, 0x69, 0x6c, 0x8d, 0xe5, 0xd6, 0xb9, 0xbd, 0x02, 0x74, 0xc9, 0x7f, 0x26, 0xac, 0x0c, 0xe8,
	0xfa, 0x7a, 0x11, 0xa7, 0x0f, 0x63, 0xa0, 0x1f, 0xa1, 0x27, 0x1b, 0xf0, 0x2c, 0xe2, 0x7c, 0xb1,
	0xf3, 0xa8, 0x31, 0x3c, 0xa9, 0x65, 0x10, 0x4a, 0xc6, 0x2c, 0x8f, 0xdd, 0xd6, 0xd9, 0xee, 0x6f,
	0x36, 0xf4, 0x26, 0x29, 0x17, 0x6c, 0x79, 0x97, 0x2b, 0x0c, 0xae, 0xb7, 0x6b, 0x5c, 0xff, 0xbf,
	0x94, 0xb9, 0xa4, 0xca, 0xa6, 0x41, 0x95, 0x3a, 0xbb, 0xb6, 0x4c, 0x76, 0x45, 0xb0, 0x27, 0xd5,
	0x62, 0xf1, 0x34, 0x7c, 0xf9, 0x5b, 0x98, 0x17, 0x38, 0x0b, 0x33, 0xca, 0xb8, 0xd3, 0x51, 0x3d,
	0x5d, 0xe0, 0xec, 0x8a, 0x32, 0x5e, 0xdb, 0x47, 0xdd, 0xda, 0x3e, 0x72, 0xff, 0xb4, 0x00, 0xbe,
	0xa3, 0x3f, 0xc5, 0xf3, 0x29, 0xbb, 0x03, 0xe9, 0xd6, 0x47, 0xec, 0xe1, 0x00, 0x9c, 0x02, 0xd0,
	0x8c, 0xb0, 0x48, 0x4c, 0xa6, 0x00, 0x41, 0xb0, 0xc1, 0x23, 0xc1, 0x06, 0x97, 0x95, 0xd6, 0xd7,
	0x0c, 0xdc, 0x5f, 0x2c, 0xe8, 0xae, 0xbe, 0xdc, 0x37, 0xda, 0x23, 0x68, 0x92, 0x1b, 0x31, 0xf6,
	0x2a, 0x56, 0x25, 0x08, 0xed, 0x4d, 0xb4, 0x28, 0x48, 0xd9, 0xdb, 0x4a, 0x30, 0xbb, 0xb4, 0x59,
	0xeb, 0xd2, 0x29, 0xf4, 0xe5, 0x5a, 0x78, 0x59, 0xbe, 0x1c, 0x76, 0xc4, 0xa1, 0xa1, 0x64, 0x1b,
	0xf3, 0x83, 0xa1, 0xe7, 0x13, 0xd9, 0xb1, 0x77, 0xd9, 0x78, 0xb7, 0x1d, 0x53, 0x2b, 0x71, 0xa3,
	0x56, 0xe2, 0xf1, 0x3f, 0x1d, 0xe8, 0xca, 0xea, 0x06, 0xcb, 0x74, 0x8e, 0x46, 0x30, 0xf0, 0x82,
	0x50, 0xdf, 0x6d, 0x92, 0x7c, 0x35, 0xc5, 0xb3, 0xae, 0x50, 0x4c, 0x92, 0x8c, 0x2f, 0xdd, 0xf7,
	0xd0, 0x18, 0x0e, 0x57, 0xf6, 0x2b, 0xe4, 0x73, 0x34, 0x10, 0x36, 0xeb, 0xc6, 0x31, 0x7d, 0xbe,
	0xd0, 0x7c, 0xb4, 0x8d, 0x7e, 0xa4, 0x5f, 0x54, 0x69, 0x4d, 0xcf, 0x4f, 0xe0, 0xd1, 0xfa, 0x36,
	0x41, 0x70, 0x83, 0xb5, 0x8f, 0x90, 0x4d, 0xeb, 0x17, 0x32, 0x17, 0x7d, 0x45, 0x20, 0xb9, 0x48,
	0x8c, 0x9d, 0x6a, 0xba, 0x7c, 0x06, 0xfb, 0xa5, 0xcb, 0xea, 0xcd, 0x79, 0x50, 0x2d, 0x9f, 0x4a,
	0x63, 0x7a, 0x9c, 0x6a, 0x80, 0xa9, 0x77, 0x91, 0x16, 0x93, 0x70, 0x31, 0xcd, 0x3f, 0x86, 0xbe,
	0x17, 0x84, 0xe7, 0x24, 0x62, 0x7c, 0x46, 0x22, 0x8e, 0x64, 0x33, 0xaf, 0xc4, 0x8d, 0x60, 0x02,
	0x2f, 0x34, 0x5a, 0x49, 0x05, 0xa3, 0x69, 0x4c, 0x8f, 0x11, 0x0c, 0x02, 0x2f, 0xd4, 0xf9, 0x4b,
	0x56, 0x4f, 0x53, 0x6c, 0xe0, 0x19, 0x78, 0xa1, 0x36, 0xe0, 0xff, 0x59, 0xb7, 0xb1, 0x3c, 0x5d,
	0xc7, 0xf3, 0xb0, 0xb6, 0x98, 0xc5, 0x5a, 0xde, 0x9a, 0xc3, 0x3d, 0x00, 0xfd, 0x0a, 0x9e, 0x04,
	0x5e, 0xb8, 0x65, 0x71, 0x1c, 0xcb, 0xb9, 0xdf, 0xd0, 0xd7, 0x6b, 0x8e, 0x6a, 0xde, 0x3b, 0xdb,
	0xe4, 0x6b, 0x70, 0x4c, 0x97, 0xfb, 0xf5, 0xa4, 0xc2, 0x5c, 0x5f, 0x4b, 0x12, 0x73, 0x4d, 0xb1,
	0xcd, 0x5e, 0x1f, 0x6c, 0xf5, 0xbc, 0x59, 0x2b, 0x4c, 0xfb, 0x21, 0xf4, 0x02, 0x2f, 0x5c, 0xbd,
	0x3b, 0xfa, 0xe2, 0x5b, 0x25, 0x6d, 0x3b, 0x59, 0x6f, 0x45, 0x6d, 0x76, 0xa5, 0x62, 0xa3, 0x17,
	0x03, 0xef, 0x8e, 0xbd, 0x38, 0x84, 0xf6, 0x14, 0x7b, 0x0b, 0x9a, 0x13, 0x55, 0xbf, 0xe9, 0x37,
	0x52, 0x98, 0x08, 0x8e, 0xac, 0x9f, 0xda, 0x99, 0x62, 0x8f, 0x11, 0x71, 0xff, 0xe3, 0xd2, 0x54,
	0x4a, 0x9b, 0xb6, 0x67, 0xed, 0x1f, 0x9a, 0xa3, 0x4f, 0xbf, 0xcc, 0x66, 0xb3, 0x96, 0xfc, 0xc3,
	0xf7, 0xf9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xb8, 0x41, 0xca, 0x16, 0x0e, 0x00, 0x00,
}
