// Code generated by protoc-gen-go. DO NOT EDIT.
// source: frame_sync.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RoomBaseInfo struct {
	Id                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AddTime              int32     `protobuf:"varint,2,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
	Status               int32     `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Timeout              int32     `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	SequenceNumber       int32     `protobuf:"varint,5,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	RandSeek             int32     `protobuf:"varint,6,opt,name=rand_seek,json=randSeek,proto3" json:"rand_seek,omitempty"`
	PlayerList           []*Player `protobuf:"bytes,7,rep,name=player_list,json=playerList,proto3" json:"player_list,omitempty"`
	RoomId               string    `protobuf:"bytes,8,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	StartTime            int32     `protobuf:"varint,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int32     `protobuf:"varint,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RoomBaseInfo) Reset()         { *m = RoomBaseInfo{} }
func (m *RoomBaseInfo) String() string { return proto.CompactTextString(m) }
func (*RoomBaseInfo) ProtoMessage()    {}
func (*RoomBaseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{0}
}

func (m *RoomBaseInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomBaseInfo.Unmarshal(m, b)
}
func (m *RoomBaseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomBaseInfo.Marshal(b, m, deterministic)
}
func (m *RoomBaseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomBaseInfo.Merge(m, src)
}
func (m *RoomBaseInfo) XXX_Size() int {
	return xxx_messageInfo_RoomBaseInfo.Size(m)
}
func (m *RoomBaseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomBaseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoomBaseInfo proto.InternalMessageInfo

func (m *RoomBaseInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RoomBaseInfo) GetAddTime() int32 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

func (m *RoomBaseInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RoomBaseInfo) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *RoomBaseInfo) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *RoomBaseInfo) GetRandSeek() int32 {
	if m != nil {
		return m.RandSeek
	}
	return 0
}

func (m *RoomBaseInfo) GetPlayerList() []*Player {
	if m != nil {
		return m.PlayerList
	}
	return nil
}

func (m *RoomBaseInfo) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *RoomBaseInfo) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *RoomBaseInfo) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type PlayerResumeGame struct {
	PlayerId             int32    `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	RoomId               string   `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	SequenceNumber       int32    `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerResumeGame) Reset()         { *m = PlayerResumeGame{} }
func (m *PlayerResumeGame) String() string { return proto.CompactTextString(m) }
func (*PlayerResumeGame) ProtoMessage()    {}
func (*PlayerResumeGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{1}
}

func (m *PlayerResumeGame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerResumeGame.Unmarshal(m, b)
}
func (m *PlayerResumeGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerResumeGame.Marshal(b, m, deterministic)
}
func (m *PlayerResumeGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerResumeGame.Merge(m, src)
}
func (m *PlayerResumeGame) XXX_Size() int {
	return xxx_messageInfo_PlayerResumeGame.Size(m)
}
func (m *PlayerResumeGame) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerResumeGame.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerResumeGame proto.InternalMessageInfo

func (m *PlayerResumeGame) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerResumeGame) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *PlayerResumeGame) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

type PlayerMatchSign struct {
	PlayerId             int32    `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerMatchSign) Reset()         { *m = PlayerMatchSign{} }
func (m *PlayerMatchSign) String() string { return proto.CompactTextString(m) }
func (*PlayerMatchSign) ProtoMessage()    {}
func (*PlayerMatchSign) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{2}
}

func (m *PlayerMatchSign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerMatchSign.Unmarshal(m, b)
}
func (m *PlayerMatchSign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerMatchSign.Marshal(b, m, deterministic)
}
func (m *PlayerMatchSign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerMatchSign.Merge(m, src)
}
func (m *PlayerMatchSign) XXX_Size() int {
	return xxx_messageInfo_PlayerMatchSign.Size(m)
}
func (m *PlayerMatchSign) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerMatchSign.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerMatchSign proto.InternalMessageInfo

func (m *PlayerMatchSign) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type PlayerReady struct {
	PlayerId             int32    `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	RoomId               string   `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerReady) Reset()         { *m = PlayerReady{} }
func (m *PlayerReady) String() string { return proto.CompactTextString(m) }
func (*PlayerReady) ProtoMessage()    {}
func (*PlayerReady) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{3}
}

func (m *PlayerReady) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerReady.Unmarshal(m, b)
}
func (m *PlayerReady) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerReady.Marshal(b, m, deterministic)
}
func (m *PlayerReady) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerReady.Merge(m, src)
}
func (m *PlayerReady) XXX_Size() int {
	return xxx_messageInfo_PlayerReady.Size(m)
}
func (m *PlayerReady) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerReady.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerReady proto.InternalMessageInfo

func (m *PlayerReady) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerReady) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

type RoomHistory struct {
	PlayerId             int32    `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	RoomId               string   `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	SequenceNumberStart  int32    `protobuf:"varint,3,opt,name=sequence_numberStart,json=sequenceNumberStart,proto3" json:"sequence_numberStart,omitempty"`
	SequenceNumberEnd    int32    `protobuf:"varint,4,opt,name=sequence_numberEnd,json=sequenceNumberEnd,proto3" json:"sequence_numberEnd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomHistory) Reset()         { *m = RoomHistory{} }
func (m *RoomHistory) String() string { return proto.CompactTextString(m) }
func (*RoomHistory) ProtoMessage()    {}
func (*RoomHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{4}
}

func (m *RoomHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomHistory.Unmarshal(m, b)
}
func (m *RoomHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomHistory.Marshal(b, m, deterministic)
}
func (m *RoomHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomHistory.Merge(m, src)
}
func (m *RoomHistory) XXX_Size() int {
	return xxx_messageInfo_RoomHistory.Size(m)
}
func (m *RoomHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomHistory.DiscardUnknown(m)
}

var xxx_messageInfo_RoomHistory proto.InternalMessageInfo

func (m *RoomHistory) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *RoomHistory) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *RoomHistory) GetSequenceNumberStart() int32 {
	if m != nil {
		return m.SequenceNumberStart
	}
	return 0
}

func (m *RoomHistory) GetSequenceNumberEnd() int32 {
	if m != nil {
		return m.SequenceNumberEnd
	}
	return 0
}

type PlayerMatchSignCancel struct {
	PlayerId             int32    `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerMatchSignCancel) Reset()         { *m = PlayerMatchSignCancel{} }
func (m *PlayerMatchSignCancel) String() string { return proto.CompactTextString(m) }
func (*PlayerMatchSignCancel) ProtoMessage()    {}
func (*PlayerMatchSignCancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{5}
}

func (m *PlayerMatchSignCancel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerMatchSignCancel.Unmarshal(m, b)
}
func (m *PlayerMatchSignCancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerMatchSignCancel.Marshal(b, m, deterministic)
}
func (m *PlayerMatchSignCancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerMatchSignCancel.Merge(m, src)
}
func (m *PlayerMatchSignCancel) XXX_Size() int {
	return xxx_messageInfo_PlayerMatchSignCancel.Size(m)
}
func (m *PlayerMatchSignCancel) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerMatchSignCancel.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerMatchSignCancel proto.InternalMessageInfo

func (m *PlayerMatchSignCancel) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type GameOver struct {
	PlayerId             int32    `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	RoomId               string   `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	SequenceNumber       int32    `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Result               string   `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameOver) Reset()         { *m = GameOver{} }
func (m *GameOver) String() string { return proto.CompactTextString(m) }
func (*GameOver) ProtoMessage()    {}
func (*GameOver) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{6}
}

func (m *GameOver) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameOver.Unmarshal(m, b)
}
func (m *GameOver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameOver.Marshal(b, m, deterministic)
}
func (m *GameOver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameOver.Merge(m, src)
}
func (m *GameOver) XXX_Size() int {
	return xxx_messageInfo_GameOver.Size(m)
}
func (m *GameOver) XXX_DiscardUnknown() {
	xxx_messageInfo_GameOver.DiscardUnknown(m)
}

var xxx_messageInfo_GameOver proto.InternalMessageInfo

func (m *GameOver) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *GameOver) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *GameOver) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *GameOver) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type PlayerOver struct {
	PlayerId             int32    `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	SequenceNumber       int32    `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerOver) Reset()         { *m = PlayerOver{} }
func (m *PlayerOver) String() string { return proto.CompactTextString(m) }
func (*PlayerOver) ProtoMessage()    {}
func (*PlayerOver) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{7}
}

func (m *PlayerOver) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerOver.Unmarshal(m, b)
}
func (m *PlayerOver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerOver.Marshal(b, m, deterministic)
}
func (m *PlayerOver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerOver.Merge(m, src)
}
func (m *PlayerOver) XXX_Size() int {
	return xxx_messageInfo_PlayerOver.Size(m)
}
func (m *PlayerOver) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerOver.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerOver proto.InternalMessageInfo

func (m *PlayerOver) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerOver) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

type OtherPlayerOffline struct {
	PlayerId             int32    `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OtherPlayerOffline) Reset()         { *m = OtherPlayerOffline{} }
func (m *OtherPlayerOffline) String() string { return proto.CompactTextString(m) }
func (*OtherPlayerOffline) ProtoMessage()    {}
func (*OtherPlayerOffline) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{8}
}

func (m *OtherPlayerOffline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OtherPlayerOffline.Unmarshal(m, b)
}
func (m *OtherPlayerOffline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OtherPlayerOffline.Marshal(b, m, deterministic)
}
func (m *OtherPlayerOffline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OtherPlayerOffline.Merge(m, src)
}
func (m *OtherPlayerOffline) XXX_Size() int {
	return xxx_messageInfo_OtherPlayerOffline.Size(m)
}
func (m *OtherPlayerOffline) XXX_DiscardUnknown() {
	xxx_messageInfo_OtherPlayerOffline.DiscardUnknown(m)
}

var xxx_messageInfo_OtherPlayerOffline proto.InternalMessageInfo

func (m *OtherPlayerOffline) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type StartBattle struct {
	SequenceNumberStart  int32    `protobuf:"varint,1,opt,name=sequence_number_start,json=sequenceNumberStart,proto3" json:"sequence_number_start,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartBattle) Reset()         { *m = StartBattle{} }
func (m *StartBattle) String() string { return proto.CompactTextString(m) }
func (*StartBattle) ProtoMessage()    {}
func (*StartBattle) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{9}
}

func (m *StartBattle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartBattle.Unmarshal(m, b)
}
func (m *StartBattle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartBattle.Marshal(b, m, deterministic)
}
func (m *StartBattle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartBattle.Merge(m, src)
}
func (m *StartBattle) XXX_Size() int {
	return xxx_messageInfo_StartBattle.Size(m)
}
func (m *StartBattle) XXX_DiscardUnknown() {
	xxx_messageInfo_StartBattle.DiscardUnknown(m)
}

var xxx_messageInfo_StartBattle proto.InternalMessageInfo

func (m *StartBattle) GetSequenceNumberStart() int32 {
	if m != nil {
		return m.SequenceNumberStart
	}
	return 0
}

type EnterBattle struct {
	RandSeek             int32     `protobuf:"varint,1,opt,name=rand_seek,json=randSeek,proto3" json:"rand_seek,omitempty"`
	RoomId               string    `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	SequenceNumber       int32     `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Status               int32     `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	AddTime              int32     `protobuf:"varint,5,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
	Time                 int64     `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	PlayerList           []*Player `protobuf:"bytes,7,rep,name=player_list,json=playerList,proto3" json:"player_list,omitempty"`
	UdpPort              string    `protobuf:"bytes,8,opt,name=udp_port,json=udpPort,proto3" json:"udp_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *EnterBattle) Reset()         { *m = EnterBattle{} }
func (m *EnterBattle) String() string { return proto.CompactTextString(m) }
func (*EnterBattle) ProtoMessage()    {}
func (*EnterBattle) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{10}
}

func (m *EnterBattle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnterBattle.Unmarshal(m, b)
}
func (m *EnterBattle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnterBattle.Marshal(b, m, deterministic)
}
func (m *EnterBattle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterBattle.Merge(m, src)
}
func (m *EnterBattle) XXX_Size() int {
	return xxx_messageInfo_EnterBattle.Size(m)
}
func (m *EnterBattle) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterBattle.DiscardUnknown(m)
}

var xxx_messageInfo_EnterBattle proto.InternalMessageInfo

func (m *EnterBattle) GetRandSeek() int32 {
	if m != nil {
		return m.RandSeek
	}
	return 0
}

func (m *EnterBattle) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *EnterBattle) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *EnterBattle) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *EnterBattle) GetAddTime() int32 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

func (m *EnterBattle) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *EnterBattle) GetPlayerList() []*Player {
	if m != nil {
		return m.PlayerList
	}
	return nil
}

func (m *EnterBattle) GetUdpPort() string {
	if m != nil {
		return m.UdpPort
	}
	return ""
}

type LogicFrame struct {
	Id                   int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RoomId               string        `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	SequenceNumber       int32         `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Operations           []*LogicFrame `protobuf:"bytes,4,rep,name=operations,proto3" json:"operations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LogicFrame) Reset()         { *m = LogicFrame{} }
func (m *LogicFrame) String() string { return proto.CompactTextString(m) }
func (*LogicFrame) ProtoMessage()    {}
func (*LogicFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{11}
}

func (m *LogicFrame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicFrame.Unmarshal(m, b)
}
func (m *LogicFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicFrame.Marshal(b, m, deterministic)
}
func (m *LogicFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicFrame.Merge(m, src)
}
func (m *LogicFrame) XXX_Size() int {
	return xxx_messageInfo_LogicFrame.Size(m)
}
func (m *LogicFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicFrame.DiscardUnknown(m)
}

var xxx_messageInfo_LogicFrame proto.InternalMessageInfo

func (m *LogicFrame) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogicFrame) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *LogicFrame) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *LogicFrame) GetOperations() []*LogicFrame {
	if m != nil {
		return m.Operations
	}
	return nil
}

type ReadyTimeout struct {
	RoomId               string   `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadyTimeout) Reset()         { *m = ReadyTimeout{} }
func (m *ReadyTimeout) String() string { return proto.CompactTextString(m) }
func (*ReadyTimeout) ProtoMessage()    {}
func (*ReadyTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{12}
}

func (m *ReadyTimeout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadyTimeout.Unmarshal(m, b)
}
func (m *ReadyTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadyTimeout.Marshal(b, m, deterministic)
}
func (m *ReadyTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadyTimeout.Merge(m, src)
}
func (m *ReadyTimeout) XXX_Size() int {
	return xxx_messageInfo_ReadyTimeout.Size(m)
}
func (m *ReadyTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadyTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_ReadyTimeout proto.InternalMessageInfo

func (m *ReadyTimeout) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

type Player struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Nickname             string   `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Status               int32    `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	AddTime              int32    `protobuf:"varint,5,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
	UpTime               int32    `protobuf:"varint,6,opt,name=upTime,proto3" json:"upTime,omitempty"`
	RoomId               string   `protobuf:"bytes,7,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	SessionId            string   `protobuf:"bytes,8,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Timeout              int32    `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ContentType          int32    `protobuf:"varint,10,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ProtocolType         int32    `protobuf:"varint,11,opt,name=protocol_type,json=protocolType,proto3" json:"protocol_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{13}
}

func (m *Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player.Unmarshal(m, b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player.Marshal(b, m, deterministic)
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return xxx_messageInfo_Player.Size(m)
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Player) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Player) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Player) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Player) GetAddTime() int32 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

func (m *Player) GetUpTime() int32 {
	if m != nil {
		return m.UpTime
	}
	return 0
}

func (m *Player) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *Player) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *Player) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Player) GetContentType() int32 {
	if m != nil {
		return m.ContentType
	}
	return 0
}

func (m *Player) GetProtocolType() int32 {
	if m != nil {
		return m.ProtocolType
	}
	return 0
}

type PlayerStatus struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Nickname             string   `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Status               int32    `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	RoomId               string   `protobuf:"bytes,4,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	AddTime              int32    `protobuf:"varint,5,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
	UpTime               int32    `protobuf:"varint,6,opt,name=up_time,json=upTime,proto3" json:"up_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerStatus) Reset()         { *m = PlayerStatus{} }
func (m *PlayerStatus) String() string { return proto.CompactTextString(m) }
func (*PlayerStatus) ProtoMessage()    {}
func (*PlayerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{14}
}

func (m *PlayerStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerStatus.Unmarshal(m, b)
}
func (m *PlayerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerStatus.Marshal(b, m, deterministic)
}
func (m *PlayerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerStatus.Merge(m, src)
}
func (m *PlayerStatus) XXX_Size() int {
	return xxx_messageInfo_PlayerStatus.Size(m)
}
func (m *PlayerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerStatus proto.InternalMessageInfo

func (m *PlayerStatus) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlayerStatus) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *PlayerStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PlayerStatus) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *PlayerStatus) GetAddTime() int32 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

func (m *PlayerStatus) GetUpTime() int32 {
	if m != nil {
		return m.UpTime
	}
	return 0
}

type RestartGame struct {
	RoomId               string   `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	PlayerIds            []int32  `protobuf:"varint,2,rep,packed,name=player_ids,json=playerIds,proto3" json:"player_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartGame) Reset()         { *m = RestartGame{} }
func (m *RestartGame) String() string { return proto.CompactTextString(m) }
func (*RestartGame) ProtoMessage()    {}
func (*RestartGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{15}
}

func (m *RestartGame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartGame.Unmarshal(m, b)
}
func (m *RestartGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartGame.Marshal(b, m, deterministic)
}
func (m *RestartGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartGame.Merge(m, src)
}
func (m *RestartGame) XXX_Size() int {
	return xxx_messageInfo_RestartGame.Size(m)
}
func (m *RestartGame) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartGame.DiscardUnknown(m)
}

var xxx_messageInfo_RestartGame proto.InternalMessageInfo

func (m *RestartGame) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *RestartGame) GetPlayerIds() []int32 {
	if m != nil {
		return m.PlayerIds
	}
	return nil
}

type PlayerMatchSignFailed struct {
	PlayerId             int32    `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Code                 int32    `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerMatchSignFailed) Reset()         { *m = PlayerMatchSignFailed{} }
func (m *PlayerMatchSignFailed) String() string { return proto.CompactTextString(m) }
func (*PlayerMatchSignFailed) ProtoMessage()    {}
func (*PlayerMatchSignFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{16}
}

func (m *PlayerMatchSignFailed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerMatchSignFailed.Unmarshal(m, b)
}
func (m *PlayerMatchSignFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerMatchSignFailed.Marshal(b, m, deterministic)
}
func (m *PlayerMatchSignFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerMatchSignFailed.Merge(m, src)
}
func (m *PlayerMatchSignFailed) XXX_Size() int {
	return xxx_messageInfo_PlayerMatchSignFailed.Size(m)
}
func (m *PlayerMatchSignFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerMatchSignFailed.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerMatchSignFailed proto.InternalMessageInfo

func (m *PlayerMatchSignFailed) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerMatchSignFailed) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PlayerMatchSignFailed) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type PlayerMatchingFailed struct {
	PlayerId             int32    `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	RoomId               string   `protobuf:"bytes,3,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Code                 int32    `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerMatchingFailed) Reset()         { *m = PlayerMatchingFailed{} }
func (m *PlayerMatchingFailed) String() string { return proto.CompactTextString(m) }
func (*PlayerMatchingFailed) ProtoMessage()    {}
func (*PlayerMatchingFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c39964a4dd7e9c, []int{17}
}

func (m *PlayerMatchingFailed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerMatchingFailed.Unmarshal(m, b)
}
func (m *PlayerMatchingFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerMatchingFailed.Marshal(b, m, deterministic)
}
func (m *PlayerMatchingFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerMatchingFailed.Merge(m, src)
}
func (m *PlayerMatchingFailed) XXX_Size() int {
	return xxx_messageInfo_PlayerMatchingFailed.Size(m)
}
func (m *PlayerMatchingFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerMatchingFailed.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerMatchingFailed proto.InternalMessageInfo

func (m *PlayerMatchingFailed) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerMatchingFailed) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PlayerMatchingFailed) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *PlayerMatchingFailed) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*RoomBaseInfo)(nil), "pb.RoomBaseInfo")
	proto.RegisterType((*PlayerResumeGame)(nil), "pb.PlayerResumeGame")
	proto.RegisterType((*PlayerMatchSign)(nil), "pb.PlayerMatchSign")
	proto.RegisterType((*PlayerReady)(nil), "pb.PlayerReady")
	proto.RegisterType((*RoomHistory)(nil), "pb.RoomHistory")
	proto.RegisterType((*PlayerMatchSignCancel)(nil), "pb.PlayerMatchSignCancel")
	proto.RegisterType((*GameOver)(nil), "pb.GameOver")
	proto.RegisterType((*PlayerOver)(nil), "pb.PlayerOver")
	proto.RegisterType((*OtherPlayerOffline)(nil), "pb.OtherPlayerOffline")
	proto.RegisterType((*StartBattle)(nil), "pb.StartBattle")
	proto.RegisterType((*EnterBattle)(nil), "pb.EnterBattle")
	proto.RegisterType((*LogicFrame)(nil), "pb.LogicFrame")
	proto.RegisterType((*ReadyTimeout)(nil), "pb.ReadyTimeout")
	proto.RegisterType((*Player)(nil), "pb.Player")
	proto.RegisterType((*PlayerStatus)(nil), "pb.PlayerStatus")
	proto.RegisterType((*RestartGame)(nil), "pb.RestartGame")
	proto.RegisterType((*PlayerMatchSignFailed)(nil), "pb.PlayerMatchSignFailed")
	proto.RegisterType((*PlayerMatchingFailed)(nil), "pb.PlayerMatchingFailed")
}

func init() { proto.RegisterFile("frame_sync.proto", fileDescriptor_33c39964a4dd7e9c) }

var fileDescriptor_33c39964a4dd7e9c = []byte{
	// 1073 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0xe4, 0x44,
	0x10, 0xc6, 0x9e, 0xcc, 0x5f, 0x79, 0x36, 0x09, 0xbd, 0xf9, 0x71, 0x82, 0x90, 0x82, 0x39, 0x6c,
	0x24, 0x60, 0x20, 0x01, 0x21, 0x24, 0x40, 0x82, 0x8c, 0x66, 0x21, 0xd2, 0xc2, 0xae, 0xec, 0x9c,
	0xf6, 0x62, 0x79, 0xec, 0x4e, 0xd6, 0xca, 0xb8, 0xdb, 0xb1, 0xdb, 0x48, 0x73, 0xe4, 0x05, 0x78,
	0x05, 0x4e, 0x3c, 0x00, 0x07, 0x9e, 0x89, 0x87, 0xe0, 0x82, 0xfa, 0xc7, 0x9e, 0xee, 0x19, 0xef,
	0x2c, 0x09, 0x70, 0x73, 0x57, 0x57, 0x55, 0xd7, 0xf7, 0x75, 0xd7, 0x57, 0x86, 0xdd, 0xeb, 0x22,
	0xca, 0x70, 0x58, 0x2e, 0x48, 0x3c, 0xce, 0x0b, 0xca, 0x28, 0xb2, 0xf3, 0xd9, 0xf1, 0x28, 0xa6,
	0x59, 0x46, 0x89, 0xb4, 0x78, 0xbf, 0xdb, 0x30, 0xf2, 0x29, 0xcd, 0x2e, 0xa2, 0x12, 0x5f, 0x92,
	0x6b, 0x8a, 0xb6, 0xc1, 0x4e, 0x13, 0xd7, 0x3a, 0xb1, 0x4e, 0x87, 0xbe, 0x9d, 0x26, 0xe8, 0x08,
	0x06, 0x51, 0x92, 0x84, 0x2c, 0xcd, 0xb0, 0x6b, 0x9f, 0x58, 0xa7, 0x5d, 0xbf, 0x1f, 0x25, 0xc9,
	0x55, 0x9a, 0x61, 0x74, 0x00, 0xbd, 0x92, 0x45, 0xac, 0x2a, 0xdd, 0x8e, 0xd8, 0x50, 0x2b, 0xe4,
	0x42, 0x9f, 0xbb, 0xd3, 0x8a, 0xb9, 0x5b, 0x32, 0x42, 0x2d, 0xd1, 0x13, 0xd8, 0x29, 0xf1, 0x5d,
	0x85, 0x49, 0x8c, 0x43, 0x52, 0x65, 0x33, 0x5c, 0xb8, 0x5d, 0xe1, 0xb1, 0x5d, 0x9b, 0x7f, 0x14,
	0x56, 0xf4, 0x0e, 0x0c, 0x8b, 0x88, 0x24, 0x61, 0x89, 0xf1, 0xad, 0xdb, 0x13, 0x2e, 0x03, 0x6e,
	0x08, 0x30, 0xbe, 0x45, 0x1f, 0x80, 0x93, 0xcf, 0xa3, 0x05, 0x2e, 0xc2, 0x79, 0x5a, 0x32, 0xb7,
	0x7f, 0xd2, 0x39, 0x75, 0xce, 0x61, 0x9c, 0xcf, 0xc6, 0x2f, 0x84, 0xd9, 0x07, 0xb9, 0xfd, 0x2c,
	0x2d, 0x19, 0x3a, 0x84, 0x7e, 0x41, 0x69, 0x16, 0xa6, 0x89, 0x3b, 0x10, 0xa0, 0x7a, 0x7c, 0x79,
	0x99, 0xa0, 0x77, 0x01, 0x4a, 0x16, 0x15, 0x4c, 0x42, 0x1b, 0x8a, 0x33, 0x86, 0xc2, 0x22, 0xc0,
	0x1d, 0xc1, 0x00, 0x13, 0x85, 0x1b, 0x24, 0x0a, 0x4c, 0x04, 0x6e, 0xef, 0x0e, 0x76, 0xd5, 0x41,
	0xb8, 0xac, 0x32, 0xfc, 0x5d, 0x94, 0x61, 0x5e, 0xb0, 0xaa, 0x49, 0xb1, 0xd7, 0xf5, 0x07, 0xd2,
	0x70, 0x99, 0xe8, 0x35, 0xd8, 0x46, 0x0d, 0x2d, 0x7c, 0x74, 0xda, 0xf8, 0xf0, 0xc6, 0xb0, 0x23,
	0x8f, 0xfc, 0x21, 0x62, 0xf1, 0xab, 0x20, 0xbd, 0x21, 0x1b, 0x4f, 0xf4, 0x26, 0xe0, 0xd4, 0x25,
	0x46, 0xc9, 0xe2, 0x61, 0xd5, 0x79, 0xbf, 0x59, 0xe0, 0xf0, 0xb7, 0xf1, 0x7d, 0x5a, 0x32, 0x5a,
	0x3c, 0x30, 0x0b, 0x3a, 0x83, 0xbd, 0x15, 0x8c, 0x01, 0x27, 0x59, 0x01, 0x7d, 0x6c, 0x02, 0x15,
	0x5b, 0xe8, 0x23, 0x40, 0x2b, 0x21, 0x53, 0x92, 0xa8, 0xb7, 0xf4, 0xb6, 0x19, 0x30, 0x25, 0x89,
	0xf7, 0x19, 0xec, 0xaf, 0x90, 0x33, 0x89, 0x48, 0x8c, 0xe7, 0x9b, 0x29, 0xfa, 0xd9, 0x82, 0x01,
	0xbf, 0xba, 0xe7, 0x3f, 0xc9, 0xf7, 0xf6, 0x3f, 0x5e, 0x1f, 0xef, 0x94, 0x02, 0x97, 0xd5, 0x5c,
	0x36, 0x04, 0x4f, 0x20, 0x56, 0x9e, 0x0f, 0x20, 0x2b, 0x7f, 0x73, 0x11, 0x2d, 0x67, 0xd9, 0xad,
	0x4f, 0xe5, 0x0c, 0xd0, 0x73, 0xf6, 0x0a, 0x17, 0x2a, 0xf1, 0xf5, 0xf5, 0x3c, 0x25, 0x9b, 0xdf,
	0xa7, 0xf7, 0x2d, 0x38, 0x82, 0xf8, 0x8b, 0x88, 0xb1, 0x39, 0x46, 0xe7, 0xb0, 0xbf, 0x72, 0x54,
	0x28, 0xfa, 0x42, 0xc5, 0xb5, 0x5d, 0x99, 0xf7, 0x97, 0x05, 0xce, 0x94, 0x30, 0x5c, 0xa8, 0x1c,
	0x46, 0x03, 0x5b, 0x2b, 0x0d, 0xfc, 0x9f, 0x10, 0xaa, 0xa4, 0x67, 0xcb, 0x90, 0x1e, 0x5d, 0xad,
	0xba, 0xa6, 0x5a, 0x21, 0xd8, 0x12, 0x66, 0xae, 0x26, 0x1d, 0x5f, 0x7c, 0xdf, 0x4f, 0x49, 0x8e,
	0x60, 0x50, 0x25, 0x79, 0x98, 0xd3, 0x82, 0x29, 0x29, 0xe9, 0x57, 0x49, 0xfe, 0x82, 0x16, 0xcc,
	0xfb, 0xc5, 0x02, 0x78, 0x46, 0x6f, 0xd2, 0xf8, 0x29, 0x57, 0x5c, 0x4d, 0x43, 0xbb, 0x42, 0x43,
	0xff, 0x3d, 0xde, 0x31, 0x00, 0xcd, 0x71, 0x11, 0xb1, 0x94, 0x12, 0x8e, 0x99, 0xd7, 0xb9, 0xcd,
	0xeb, 0x5c, 0x9e, 0xea, 0x6b, 0x1e, 0xde, 0x13, 0x18, 0x89, 0xce, 0xbf, 0x52, 0xc2, 0xab, 0x55,
	0x60, 0x19, 0x3d, 0xfe, 0x87, 0x0d, 0x3d, 0x89, 0x75, 0xad, 0xea, 0x63, 0x18, 0x54, 0x25, 0x2e,
	0x48, 0xa4, 0x94, 0x7f, 0xe8, 0x37, 0x6b, 0xbe, 0x47, 0xd2, 0xf8, 0x56, 0xec, 0x75, 0xe4, 0x5e,
	0xbd, 0x7e, 0xc8, 0xdd, 0x1c, 0x40, 0xaf, 0xca, 0xaf, 0xea, 0xdb, 0xe9, 0xfa, 0x6a, 0xa5, 0x97,
	0xdd, 0x5f, 0x13, 0x6f, 0x5c, 0x96, 0x29, 0x25, 0x4b, 0x61, 0x1f, 0x2a, 0xcb, 0x65, 0xa2, 0x4f,
	0xa0, 0xa1, 0x39, 0x81, 0xde, 0x83, 0x51, 0x4c, 0x09, 0xc3, 0x84, 0x85, 0x6c, 0x91, 0xd7, 0xd2,
	0xee, 0x28, 0xdb, 0xd5, 0x22, 0xc7, 0xe8, 0x7d, 0x78, 0x24, 0x66, 0x63, 0x4c, 0xe7, 0xd2, 0xc7,
	0x11, 0x3e, 0xa3, 0xda, 0xc8, 0x9d, 0xbc, 0x5f, 0x2d, 0x18, 0x49, 0xde, 0x02, 0x89, 0xae, 0x85,
	0xbd, 0x86, 0x21, 0xfb, 0xb5, 0x0c, 0x99, 0x83, 0x53, 0x83, 0xbb, 0x65, 0xc0, 0xdd, 0x40, 0xdd,
	0x21, 0xf4, 0xab, 0x3c, 0x64, 0x6b, 0xdc, 0x79, 0x53, 0x70, 0x7c, 0x2c, 0xfa, 0x56, 0x0c, 0xa8,
	0xd7, 0xbd, 0x00, 0x4e, 0x65, 0xa3, 0x0c, 0xa5, 0x6b, 0x9f, 0x74, 0xf8, 0x1c, 0xac, 0xa5, 0xa1,
	0xf4, 0x5e, 0xae, 0x89, 0xeb, 0xd3, 0x28, 0x9d, 0xe3, 0x64, 0xb3, 0x5a, 0xed, 0x42, 0x27, 0x2b,
	0x6f, 0x14, 0x70, 0xfe, 0xc9, 0xdb, 0x2f, 0xa6, 0x09, 0x56, 0x88, 0xc5, 0xb7, 0x77, 0x07, 0x7b,
	0x5a, 0xee, 0x94, 0xdc, 0x3c, 0x2c, 0x35, 0x57, 0x57, 0x81, 0x45, 0x3d, 0xc5, 0x1a, 0x59, 0x7d,
	0xe4, 0xd6, 0xf2, 0xc8, 0xf3, 0x3f, 0x07, 0x30, 0x14, 0xed, 0x12, 0x2c, 0x48, 0x8c, 0xce, 0xe1,
	0xf1, 0x24, 0x08, 0x95, 0x52, 0x36, 0xdd, 0x83, 0x56, 0x3a, 0xeb, 0x78, 0xc8, 0xd7, 0xd3, 0x2c,
	0x67, 0x0b, 0xef, 0x2d, 0xf4, 0x85, 0x16, 0xa3, 0xfd, 0x00, 0xec, 0x69, 0xaa, 0xd1, 0x58, 0xcd,
	0xc8, 0x31, 0x6c, 0x6b, 0x91, 0x7c, 0x2e, 0xef, 0xe8, 0x41, 0x51, 0xb2, 0x30, 0xfd, 0x3f, 0x84,
	0x47, 0xcb, 0xea, 0xf8, 0x80, 0xd8, 0x5e, 0xba, 0xf3, 0x75, 0x5b, 0x76, 0x7d, 0x5e, 0x8b, 0xec,
	0x9a, 0xc1, 0xf4, 0xff, 0x04, 0x76, 0x94, 0x7f, 0xf3, 0xef, 0xb7, 0x5b, 0x07, 0xd4, 0x16, 0x33,
	0xe2, 0x73, 0x40, 0x4d, 0x3d, 0xcb, 0xff, 0x90, 0xc7, 0xcb, 0xa2, 0x1a, 0xa3, 0x19, 0x77, 0x01,
	0xee, 0x7a, 0x9c, 0x1a, 0xd1, 0x47, 0x2d, 0xd1, 0x72, 0x6b, 0x2d, 0x47, 0x30, 0x09, 0xdb, 0x5f,
	0x62, 0x5b, 0x0e, 0xb9, 0x65, 0xe6, 0xf8, 0x06, 0x0e, 0xcd, 0x1c, 0xcb, 0x17, 0xe7, 0xae, 0xa4,
	0x68, 0x76, 0xd6, 0x38, 0x0e, 0x26, 0xa1, 0x3e, 0xe7, 0x04, 0xc7, 0x9a, 0x61, 0xed, 0x06, 0x83,
	0x49, 0xa8, 0x4f, 0x86, 0x4d, 0x2f, 0x4b, 0x66, 0xbf, 0xd7, 0x0d, 0x2a, 0xff, 0x7f, 0x7a, 0x83,
	0x5f, 0xc1, 0x7e, 0x30, 0x09, 0x5b, 0x7e, 0x0f, 0x0e, 0xb8, 0xd7, 0xba, 0xdd, 0x8c, 0x3e, 0x03,
	0xb4, 0x12, 0xfd, 0xc6, 0x47, 0xf9, 0xb5, 0xb8, 0x36, 0x2d, 0xe4, 0x7e, 0x1d, 0xa3, 0x10, 0xea,
	0x93, 0x4c, 0x22, 0xd4, 0x2c, 0x6d, 0x1c, 0xea, 0x7f, 0x33, 0x82, 0x43, 0xcd, 0xd0, 0xca, 0xb9,
	0x26, 0x94, 0x92, 0xf3, 0xa5, 0xc1, 0xf4, 0x3f, 0x05, 0x27, 0x98, 0x84, 0xcd, 0x7f, 0xe3, 0x88,
	0xef, 0xd5, 0x2b, 0xc3, 0xf3, 0xa2, 0xff, 0xb2, 0x3b, 0xfe, 0xf8, 0xcb, 0x7c, 0x36, 0xeb, 0x89,
	0xc1, 0xf1, 0xe9, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x8b, 0x52, 0x31, 0x8f, 0x0d, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FrameSyncClient is the client API for FrameSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrameSyncClient interface {
	CS_PlayerOperations(ctx context.Context, in *LogicFrame, opts ...grpc.CallOption) (*Empty, error)
	CS_PlayerResumeGame(ctx context.Context, in *PlayerResumeGame, opts ...grpc.CallOption) (*Empty, error)
	CS_PlayerReady(ctx context.Context, in *PlayerReady, opts ...grpc.CallOption) (*Empty, error)
	CS_PlayerOver(ctx context.Context, in *PlayerOver, opts ...grpc.CallOption) (*Empty, error)
	CS_RoomHistory(ctx context.Context, in *RoomHistory, opts ...grpc.CallOption) (*Empty, error)
	CS_RoomBaseInfo(ctx context.Context, in *RoomBaseInfo, opts ...grpc.CallOption) (*Empty, error)
	CS_PlayerMatchSign(ctx context.Context, in *PlayerMatchSign, opts ...grpc.CallOption) (*Empty, error)
	CS_PlayerMatchSignCancel(ctx context.Context, in *PlayerMatchSignCancel, opts ...grpc.CallOption) (*Empty, error)
	SC_PlayerMatchSignFailed(ctx context.Context, in *PlayerMatchSignFailed, opts ...grpc.CallOption) (*Empty, error)
	SC_PlayerMatchingFailed(ctx context.Context, in *PlayerMatchingFailed, opts ...grpc.CallOption) (*Empty, error)
	SC_EnterBattle(ctx context.Context, in *EnterBattle, opts ...grpc.CallOption) (*Empty, error)
	SC_LogicFrame(ctx context.Context, in *LogicFrame, opts ...grpc.CallOption) (*Empty, error)
	SC_RoomHistory(ctx context.Context, in *RoomHistory, opts ...grpc.CallOption) (*Empty, error)
	SC_RoomBaseInfo(ctx context.Context, in *RoomBaseInfo, opts ...grpc.CallOption) (*Empty, error)
	SC_OtherPlayerOffline(ctx context.Context, in *OtherPlayerOffline, opts ...grpc.CallOption) (*Empty, error)
	SC_OtherPlayerOver(ctx context.Context, in *PlayerOver, opts ...grpc.CallOption) (*Empty, error)
	SC_OtherPlayerResumeGame(ctx context.Context, in *PlayerResumeGame, opts ...grpc.CallOption) (*Empty, error)
	SC_ReadyTimeout(ctx context.Context, in *ReadyTimeout, opts ...grpc.CallOption) (*Empty, error)
	SC_StartBattle(ctx context.Context, in *StartBattle, opts ...grpc.CallOption) (*Empty, error)
	SC_RestartGame(ctx context.Context, in *RestartGame, opts ...grpc.CallOption) (*Empty, error)
	SC_GameOver(ctx context.Context, in *GameOver, opts ...grpc.CallOption) (*Empty, error)
}

type frameSyncClient struct {
	cc *grpc.ClientConn
}

func NewFrameSyncClient(cc *grpc.ClientConn) FrameSyncClient {
	return &frameSyncClient{cc}
}

func (c *frameSyncClient) CS_PlayerOperations(ctx context.Context, in *LogicFrame, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/CS_PlayerOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) CS_PlayerResumeGame(ctx context.Context, in *PlayerResumeGame, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/CS_PlayerResumeGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) CS_PlayerReady(ctx context.Context, in *PlayerReady, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/CS_PlayerReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) CS_PlayerOver(ctx context.Context, in *PlayerOver, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/CS_PlayerOver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) CS_RoomHistory(ctx context.Context, in *RoomHistory, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/CS_RoomHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) CS_RoomBaseInfo(ctx context.Context, in *RoomBaseInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/CS_RoomBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) CS_PlayerMatchSign(ctx context.Context, in *PlayerMatchSign, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/CS_PlayerMatchSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) CS_PlayerMatchSignCancel(ctx context.Context, in *PlayerMatchSignCancel, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/CS_PlayerMatchSignCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_PlayerMatchSignFailed(ctx context.Context, in *PlayerMatchSignFailed, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_PlayerMatchSignFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_PlayerMatchingFailed(ctx context.Context, in *PlayerMatchingFailed, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_PlayerMatchingFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_EnterBattle(ctx context.Context, in *EnterBattle, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_EnterBattle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_LogicFrame(ctx context.Context, in *LogicFrame, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_LogicFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_RoomHistory(ctx context.Context, in *RoomHistory, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_RoomHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_RoomBaseInfo(ctx context.Context, in *RoomBaseInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_RoomBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_OtherPlayerOffline(ctx context.Context, in *OtherPlayerOffline, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_OtherPlayerOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_OtherPlayerOver(ctx context.Context, in *PlayerOver, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_OtherPlayerOver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_OtherPlayerResumeGame(ctx context.Context, in *PlayerResumeGame, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_OtherPlayerResumeGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_ReadyTimeout(ctx context.Context, in *ReadyTimeout, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_ReadyTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_StartBattle(ctx context.Context, in *StartBattle, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_StartBattle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_RestartGame(ctx context.Context, in *RestartGame, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_RestartGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSyncClient) SC_GameOver(ctx context.Context, in *GameOver, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FrameSync/SC_GameOver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrameSyncServer is the server API for FrameSync service.
type FrameSyncServer interface {
	CS_PlayerOperations(context.Context, *LogicFrame) (*Empty, error)
	CS_PlayerResumeGame(context.Context, *PlayerResumeGame) (*Empty, error)
	CS_PlayerReady(context.Context, *PlayerReady) (*Empty, error)
	CS_PlayerOver(context.Context, *PlayerOver) (*Empty, error)
	CS_RoomHistory(context.Context, *RoomHistory) (*Empty, error)
	CS_RoomBaseInfo(context.Context, *RoomBaseInfo) (*Empty, error)
	CS_PlayerMatchSign(context.Context, *PlayerMatchSign) (*Empty, error)
	CS_PlayerMatchSignCancel(context.Context, *PlayerMatchSignCancel) (*Empty, error)
	SC_PlayerMatchSignFailed(context.Context, *PlayerMatchSignFailed) (*Empty, error)
	SC_PlayerMatchingFailed(context.Context, *PlayerMatchingFailed) (*Empty, error)
	SC_EnterBattle(context.Context, *EnterBattle) (*Empty, error)
	SC_LogicFrame(context.Context, *LogicFrame) (*Empty, error)
	SC_RoomHistory(context.Context, *RoomHistory) (*Empty, error)
	SC_RoomBaseInfo(context.Context, *RoomBaseInfo) (*Empty, error)
	SC_OtherPlayerOffline(context.Context, *OtherPlayerOffline) (*Empty, error)
	SC_OtherPlayerOver(context.Context, *PlayerOver) (*Empty, error)
	SC_OtherPlayerResumeGame(context.Context, *PlayerResumeGame) (*Empty, error)
	SC_ReadyTimeout(context.Context, *ReadyTimeout) (*Empty, error)
	SC_StartBattle(context.Context, *StartBattle) (*Empty, error)
	SC_RestartGame(context.Context, *RestartGame) (*Empty, error)
	SC_GameOver(context.Context, *GameOver) (*Empty, error)
}

// UnimplementedFrameSyncServer can be embedded to have forward compatible implementations.
type UnimplementedFrameSyncServer struct {
}

func (*UnimplementedFrameSyncServer) CS_PlayerOperations(ctx context.Context, req *LogicFrame) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_PlayerOperations not implemented")
}
func (*UnimplementedFrameSyncServer) CS_PlayerResumeGame(ctx context.Context, req *PlayerResumeGame) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_PlayerResumeGame not implemented")
}
func (*UnimplementedFrameSyncServer) CS_PlayerReady(ctx context.Context, req *PlayerReady) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_PlayerReady not implemented")
}
func (*UnimplementedFrameSyncServer) CS_PlayerOver(ctx context.Context, req *PlayerOver) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_PlayerOver not implemented")
}
func (*UnimplementedFrameSyncServer) CS_RoomHistory(ctx context.Context, req *RoomHistory) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_RoomHistory not implemented")
}
func (*UnimplementedFrameSyncServer) CS_RoomBaseInfo(ctx context.Context, req *RoomBaseInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_RoomBaseInfo not implemented")
}
func (*UnimplementedFrameSyncServer) CS_PlayerMatchSign(ctx context.Context, req *PlayerMatchSign) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_PlayerMatchSign not implemented")
}
func (*UnimplementedFrameSyncServer) CS_PlayerMatchSignCancel(ctx context.Context, req *PlayerMatchSignCancel) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_PlayerMatchSignCancel not implemented")
}
func (*UnimplementedFrameSyncServer) SC_PlayerMatchSignFailed(ctx context.Context, req *PlayerMatchSignFailed) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_PlayerMatchSignFailed not implemented")
}
func (*UnimplementedFrameSyncServer) SC_PlayerMatchingFailed(ctx context.Context, req *PlayerMatchingFailed) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_PlayerMatchingFailed not implemented")
}
func (*UnimplementedFrameSyncServer) SC_EnterBattle(ctx context.Context, req *EnterBattle) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_EnterBattle not implemented")
}
func (*UnimplementedFrameSyncServer) SC_LogicFrame(ctx context.Context, req *LogicFrame) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_LogicFrame not implemented")
}
func (*UnimplementedFrameSyncServer) SC_RoomHistory(ctx context.Context, req *RoomHistory) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_RoomHistory not implemented")
}
func (*UnimplementedFrameSyncServer) SC_RoomBaseInfo(ctx context.Context, req *RoomBaseInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_RoomBaseInfo not implemented")
}
func (*UnimplementedFrameSyncServer) SC_OtherPlayerOffline(ctx context.Context, req *OtherPlayerOffline) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_OtherPlayerOffline not implemented")
}
func (*UnimplementedFrameSyncServer) SC_OtherPlayerOver(ctx context.Context, req *PlayerOver) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_OtherPlayerOver not implemented")
}
func (*UnimplementedFrameSyncServer) SC_OtherPlayerResumeGame(ctx context.Context, req *PlayerResumeGame) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_OtherPlayerResumeGame not implemented")
}
func (*UnimplementedFrameSyncServer) SC_ReadyTimeout(ctx context.Context, req *ReadyTimeout) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_ReadyTimeout not implemented")
}
func (*UnimplementedFrameSyncServer) SC_StartBattle(ctx context.Context, req *StartBattle) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_StartBattle not implemented")
}
func (*UnimplementedFrameSyncServer) SC_RestartGame(ctx context.Context, req *RestartGame) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_RestartGame not implemented")
}
func (*UnimplementedFrameSyncServer) SC_GameOver(ctx context.Context, req *GameOver) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_GameOver not implemented")
}

func RegisterFrameSyncServer(s *grpc.Server, srv FrameSyncServer) {
	s.RegisterService(&_FrameSync_serviceDesc, srv)
}

func _FrameSync_CS_PlayerOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).CS_PlayerOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/CS_PlayerOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).CS_PlayerOperations(ctx, req.(*LogicFrame))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_CS_PlayerResumeGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerResumeGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).CS_PlayerResumeGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/CS_PlayerResumeGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).CS_PlayerResumeGame(ctx, req.(*PlayerResumeGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_CS_PlayerReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerReady)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).CS_PlayerReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/CS_PlayerReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).CS_PlayerReady(ctx, req.(*PlayerReady))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_CS_PlayerOver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerOver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).CS_PlayerOver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/CS_PlayerOver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).CS_PlayerOver(ctx, req.(*PlayerOver))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_CS_RoomHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).CS_RoomHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/CS_RoomHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).CS_RoomHistory(ctx, req.(*RoomHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_CS_RoomBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomBaseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).CS_RoomBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/CS_RoomBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).CS_RoomBaseInfo(ctx, req.(*RoomBaseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_CS_PlayerMatchSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerMatchSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).CS_PlayerMatchSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/CS_PlayerMatchSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).CS_PlayerMatchSign(ctx, req.(*PlayerMatchSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_CS_PlayerMatchSignCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerMatchSignCancel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).CS_PlayerMatchSignCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/CS_PlayerMatchSignCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).CS_PlayerMatchSignCancel(ctx, req.(*PlayerMatchSignCancel))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_PlayerMatchSignFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerMatchSignFailed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_PlayerMatchSignFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_PlayerMatchSignFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_PlayerMatchSignFailed(ctx, req.(*PlayerMatchSignFailed))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_PlayerMatchingFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerMatchingFailed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_PlayerMatchingFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_PlayerMatchingFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_PlayerMatchingFailed(ctx, req.(*PlayerMatchingFailed))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_EnterBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterBattle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_EnterBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_EnterBattle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_EnterBattle(ctx, req.(*EnterBattle))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_LogicFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_LogicFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_LogicFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_LogicFrame(ctx, req.(*LogicFrame))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_RoomHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_RoomHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_RoomHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_RoomHistory(ctx, req.(*RoomHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_RoomBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomBaseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_RoomBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_RoomBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_RoomBaseInfo(ctx, req.(*RoomBaseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_OtherPlayerOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtherPlayerOffline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_OtherPlayerOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_OtherPlayerOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_OtherPlayerOffline(ctx, req.(*OtherPlayerOffline))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_OtherPlayerOver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerOver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_OtherPlayerOver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_OtherPlayerOver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_OtherPlayerOver(ctx, req.(*PlayerOver))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_OtherPlayerResumeGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerResumeGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_OtherPlayerResumeGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_OtherPlayerResumeGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_OtherPlayerResumeGame(ctx, req.(*PlayerResumeGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_ReadyTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyTimeout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_ReadyTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_ReadyTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_ReadyTimeout(ctx, req.(*ReadyTimeout))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_StartBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBattle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_StartBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_StartBattle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_StartBattle(ctx, req.(*StartBattle))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_RestartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_RestartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_RestartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_RestartGame(ctx, req.(*RestartGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSync_SC_GameOver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameOver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSyncServer).SC_GameOver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FrameSync/SC_GameOver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSyncServer).SC_GameOver(ctx, req.(*GameOver))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrameSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FrameSync",
	HandlerType: (*FrameSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CS_PlayerOperations",
			Handler:    _FrameSync_CS_PlayerOperations_Handler,
		},
		{
			MethodName: "CS_PlayerResumeGame",
			Handler:    _FrameSync_CS_PlayerResumeGame_Handler,
		},
		{
			MethodName: "CS_PlayerReady",
			Handler:    _FrameSync_CS_PlayerReady_Handler,
		},
		{
			MethodName: "CS_PlayerOver",
			Handler:    _FrameSync_CS_PlayerOver_Handler,
		},
		{
			MethodName: "CS_RoomHistory",
			Handler:    _FrameSync_CS_RoomHistory_Handler,
		},
		{
			MethodName: "CS_RoomBaseInfo",
			Handler:    _FrameSync_CS_RoomBaseInfo_Handler,
		},
		{
			MethodName: "CS_PlayerMatchSign",
			Handler:    _FrameSync_CS_PlayerMatchSign_Handler,
		},
		{
			MethodName: "CS_PlayerMatchSignCancel",
			Handler:    _FrameSync_CS_PlayerMatchSignCancel_Handler,
		},
		{
			MethodName: "SC_PlayerMatchSignFailed",
			Handler:    _FrameSync_SC_PlayerMatchSignFailed_Handler,
		},
		{
			MethodName: "SC_PlayerMatchingFailed",
			Handler:    _FrameSync_SC_PlayerMatchingFailed_Handler,
		},
		{
			MethodName: "SC_EnterBattle",
			Handler:    _FrameSync_SC_EnterBattle_Handler,
		},
		{
			MethodName: "SC_LogicFrame",
			Handler:    _FrameSync_SC_LogicFrame_Handler,
		},
		{
			MethodName: "SC_RoomHistory",
			Handler:    _FrameSync_SC_RoomHistory_Handler,
		},
		{
			MethodName: "SC_RoomBaseInfo",
			Handler:    _FrameSync_SC_RoomBaseInfo_Handler,
		},
		{
			MethodName: "SC_OtherPlayerOffline",
			Handler:    _FrameSync_SC_OtherPlayerOffline_Handler,
		},
		{
			MethodName: "SC_OtherPlayerOver",
			Handler:    _FrameSync_SC_OtherPlayerOver_Handler,
		},
		{
			MethodName: "SC_OtherPlayerResumeGame",
			Handler:    _FrameSync_SC_OtherPlayerResumeGame_Handler,
		},
		{
			MethodName: "SC_ReadyTimeout",
			Handler:    _FrameSync_SC_ReadyTimeout_Handler,
		},
		{
			MethodName: "SC_StartBattle",
			Handler:    _FrameSync_SC_StartBattle_Handler,
		},
		{
			MethodName: "SC_RestartGame",
			Handler:    _FrameSync_SC_RestartGame_Handler,
		},
		{
			MethodName: "SC_GameOver",
			Handler:    _FrameSync_SC_GameOver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frame_sync.proto",
}
