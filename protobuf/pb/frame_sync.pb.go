// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.22.2
// source: frame_sync.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RoomBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid      int32   `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	Id             string  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	AddTime        int32   `protobuf:"varint,3,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
	Status         int32   `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Timeout        int32   `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	SequenceNumber int32   `protobuf:"varint,6,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	RandSeek       int32   `protobuf:"varint,7,opt,name=rand_seek,json=randSeek,proto3" json:"rand_seek,omitempty"`
	PlayerIds      []int32 `protobuf:"varint,8,rep,packed,name=player_ids,json=playerIds,proto3" json:"player_ids,omitempty"`
	RoomId         string  `protobuf:"bytes,9,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	StartTime      int32   `protobuf:"varint,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        int32   `protobuf:"varint,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *RoomBaseInfo) Reset() {
	*x = RoomBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomBaseInfo) ProtoMessage() {}

func (x *RoomBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomBaseInfo.ProtoReflect.Descriptor instead.
func (*RoomBaseInfo) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{0}
}

func (x *RoomBaseInfo) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *RoomBaseInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RoomBaseInfo) GetAddTime() int32 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

func (x *RoomBaseInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RoomBaseInfo) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *RoomBaseInfo) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *RoomBaseInfo) GetRandSeek() int32 {
	if x != nil {
		return x.RandSeek
	}
	return 0
}

func (x *RoomBaseInfo) GetPlayerIds() []int32 {
	if x != nil {
		return x.PlayerIds
	}
	return nil
}

func (x *RoomBaseInfo) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *RoomBaseInfo) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RoomBaseInfo) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type PlayerBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid int32 `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	PlayerId  int32 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *PlayerBase) Reset() {
	*x = PlayerBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBase) ProtoMessage() {}

func (x *PlayerBase) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBase.ProtoReflect.Descriptor instead.
func (*PlayerBase) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerBase) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *PlayerBase) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

type PlayerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId int32  `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	AddTime  int32  `protobuf:"varint,2,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
	Status   int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	RoomId   string `protobuf:"bytes,4,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (x *PlayerState) Reset() {
	*x = PlayerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerState) ProtoMessage() {}

func (x *PlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerState.ProtoReflect.Descriptor instead.
func (*PlayerState) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerState) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *PlayerState) GetAddTime() int32 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

func (x *PlayerState) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PlayerState) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

type PlayerResumeGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid      int32  `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	PlayerId       int32  `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	RoomId         string `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	SequenceNumber int32  `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *PlayerResumeGame) Reset() {
	*x = PlayerResumeGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerResumeGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerResumeGame) ProtoMessage() {}

func (x *PlayerResumeGame) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerResumeGame.ProtoReflect.Descriptor instead.
func (*PlayerResumeGame) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerResumeGame) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *PlayerResumeGame) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *PlayerResumeGame) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *PlayerResumeGame) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type PlayerReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid int32  `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	PlayerId  int32  `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	RoomId    string `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (x *PlayerReady) Reset() {
	*x = PlayerReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerReady) ProtoMessage() {}

func (x *PlayerReady) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerReady.ProtoReflect.Descriptor instead.
func (*PlayerReady) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerReady) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *PlayerReady) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *PlayerReady) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

type ReqRoomHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid           int32  `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	PlayerId            int32  `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	RoomId              string `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	SequenceNumberStart int32  `protobuf:"varint,4,opt,name=sequence_numberStart,json=sequenceNumberStart,proto3" json:"sequence_numberStart,omitempty"`
	SequenceNumberEnd   int32  `protobuf:"varint,5,opt,name=sequence_numberEnd,json=sequenceNumberEnd,proto3" json:"sequence_numberEnd,omitempty"`
}

func (x *ReqRoomHistory) Reset() {
	*x = ReqRoomHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqRoomHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqRoomHistory) ProtoMessage() {}

func (x *ReqRoomHistory) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqRoomHistory.ProtoReflect.Descriptor instead.
func (*ReqRoomHistory) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{5}
}

func (x *ReqRoomHistory) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *ReqRoomHistory) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *ReqRoomHistory) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *ReqRoomHistory) GetSequenceNumberStart() int32 {
	if x != nil {
		return x.SequenceNumberStart
	}
	return 0
}

func (x *ReqRoomHistory) GetSequenceNumberEnd() int32 {
	if x != nil {
		return x.SequenceNumberEnd
	}
	return 0
}

type RoomHistorySets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid int32          `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	Sets      []*RoomHistory `protobuf:"bytes,2,rep,name=Sets,proto3" json:"Sets,omitempty"`
}

func (x *RoomHistorySets) Reset() {
	*x = RoomHistorySets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomHistorySets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomHistorySets) ProtoMessage() {}

func (x *RoomHistorySets) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomHistorySets.ProtoReflect.Descriptor instead.
func (*RoomHistorySets) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{6}
}

func (x *RoomHistorySets) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *RoomHistorySets) GetSets() []*RoomHistory {
	if x != nil {
		return x.Sets
	}
	return nil
}

type RoomHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid int32  `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	Id        int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Action    string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Content   string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *RoomHistory) Reset() {
	*x = RoomHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomHistory) ProtoMessage() {}

func (x *RoomHistory) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomHistory.ProtoReflect.Descriptor instead.
func (*RoomHistory) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{7}
}

func (x *RoomHistory) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *RoomHistory) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoomHistory) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *RoomHistory) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type GameOver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid      int32  `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	PlayerId       int32  `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	RoomId         string `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	SequenceNumber int32  `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Result         string `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GameOver) Reset() {
	*x = GameOver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameOver) ProtoMessage() {}

func (x *GameOver) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameOver.ProtoReflect.Descriptor instead.
func (*GameOver) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{8}
}

func (x *GameOver) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *GameOver) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *GameOver) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GameOver) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *GameOver) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type PlayerOver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid      int32  `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	PlayerId       int32  `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	SequenceNumber int32  `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	RoomId         string `protobuf:"bytes,4,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (x *PlayerOver) Reset() {
	*x = PlayerOver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerOver) ProtoMessage() {}

func (x *PlayerOver) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerOver.ProtoReflect.Descriptor instead.
func (*PlayerOver) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{9}
}

func (x *PlayerOver) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *PlayerOver) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *PlayerOver) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *PlayerOver) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

type OtherPlayerOffline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid int32 `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	PlayerId  int32 `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *OtherPlayerOffline) Reset() {
	*x = OtherPlayerOffline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherPlayerOffline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherPlayerOffline) ProtoMessage() {}

func (x *OtherPlayerOffline) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherPlayerOffline.ProtoReflect.Descriptor instead.
func (*OtherPlayerOffline) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{10}
}

func (x *OtherPlayerOffline) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *OtherPlayerOffline) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

type StartBattle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid           int32 `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	SequenceNumberStart int32 `protobuf:"varint,2,opt,name=sequence_number_start,json=sequenceNumberStart,proto3" json:"sequence_number_start,omitempty"`
}

func (x *StartBattle) Reset() {
	*x = StartBattle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBattle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBattle) ProtoMessage() {}

func (x *StartBattle) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBattle.ProtoReflect.Descriptor instead.
func (*StartBattle) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{11}
}

func (x *StartBattle) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *StartBattle) GetSequenceNumberStart() int32 {
	if x != nil {
		return x.SequenceNumberStart
	}
	return 0
}

type EnterBattle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid      int32   `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	RandSeek       int32   `protobuf:"varint,2,opt,name=rand_seek,json=randSeek,proto3" json:"rand_seek,omitempty"`
	RoomId         string  `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	SequenceNumber int32   `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Status         int32   `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	AddTime        int32   `protobuf:"varint,6,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
	Time           int64   `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`
	UdpPort        string  `protobuf:"bytes,8,opt,name=udp_port,json=udpPort,proto3" json:"udp_port,omitempty"`
	PlayerIds      []int32 `protobuf:"varint,9,rep,packed,name=player_ids,json=playerIds,proto3" json:"player_ids,omitempty"`
}

func (x *EnterBattle) Reset() {
	*x = EnterBattle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterBattle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterBattle) ProtoMessage() {}

func (x *EnterBattle) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterBattle.ProtoReflect.Descriptor instead.
func (*EnterBattle) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{12}
}

func (x *EnterBattle) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *EnterBattle) GetRandSeek() int32 {
	if x != nil {
		return x.RandSeek
	}
	return 0
}

func (x *EnterBattle) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *EnterBattle) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *EnterBattle) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EnterBattle) GetAddTime() int32 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

func (x *EnterBattle) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *EnterBattle) GetUdpPort() string {
	if x != nil {
		return x.UdpPort
	}
	return ""
}

func (x *EnterBattle) GetPlayerIds() []int32 {
	if x != nil {
		return x.PlayerIds
	}
	return nil
}

type LogicFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid      int32        `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	Id             int32        `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	RoomId         string       `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	SequenceNumber int32        `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Operations     []*Operation `protobuf:"bytes,5,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *LogicFrame) Reset() {
	*x = LogicFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicFrame) ProtoMessage() {}

func (x *LogicFrame) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicFrame.ProtoReflect.Descriptor instead.
func (*LogicFrame) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{13}
}

func (x *LogicFrame) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *LogicFrame) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LogicFrame) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *LogicFrame) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *LogicFrame) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid int32  `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	Id        int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Event     string `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	Value     string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	PlayerId  int32  `protobuf:"varint,5,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{14}
}

func (x *Operation) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *Operation) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Operation) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *Operation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Operation) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

type ReadyTimeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid int32  `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	RoomId    string `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (x *ReadyTimeout) Reset() {
	*x = ReadyTimeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadyTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyTimeout) ProtoMessage() {}

func (x *ReadyTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyTimeout.ProtoReflect.Descriptor instead.
func (*ReadyTimeout) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{15}
}

func (x *ReadyTimeout) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *ReadyTimeout) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

type RestartGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid int32   `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	RoomId    string  `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	PlayerIds []int32 `protobuf:"varint,3,rep,packed,name=player_ids,json=playerIds,proto3" json:"player_ids,omitempty"`
}

func (x *RestartGame) Reset() {
	*x = RestartGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frame_sync_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartGame) ProtoMessage() {}

func (x *RestartGame) ProtoReflect() protoreflect.Message {
	mi := &file_frame_sync_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartGame.ProtoReflect.Descriptor instead.
func (*RestartGame) Descriptor() ([]byte, []int) {
	return file_frame_sync_proto_rawDescGZIP(), []int{16}
}

func (x *RestartGame) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *RestartGame) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *RestartGame) GetPlayerIds() []int32 {
	if x != nil {
		return x.PlayerIds
	}
	return nil
}

var File_frame_sync_proto protoreflect.FileDescriptor

var file_frame_sync_proto_rawDesc = []byte{
	0x0a, 0x10, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x02, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61,
	0x6e, 0x64, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x61, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x0a, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x10,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x62,
	0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2d, 0x0a,
	0x12, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x22, 0x55, 0x0a, 0x0f,
	0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x04, 0x53, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x53,
	0x65, 0x74, 0x73, 0x22, 0x6e, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x12, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x73,
	0x65, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x53,
	0x65, 0x65, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x64, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x64, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x0c, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x73, 0x32, 0xf9, 0x08, 0x0a, 0x09, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x2e, 0x0a, 0x0e, 0x43, 0x53, 0x5f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x13, 0x43, 0x53, 0x5f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x1a, 0x09,
	0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x13, 0x43,
	0x53, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0d, 0x43, 0x53, 0x5f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0e, 0x43, 0x53, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x52, 0x6f,
	0x6f, 0x6d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0f, 0x43, 0x53, 0x5f, 0x52, 0x6f, 0x6f,
	0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x2e, 0x70, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0e, 0x43, 0x53, 0x5f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0c, 0x43, 0x53, 0x5f, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0f, 0x53, 0x43, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0e, 0x53, 0x43, 0x5f, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0d, 0x53, 0x43, 0x5f, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0e, 0x53, 0x43, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x74, 0x73, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0f, 0x53, 0x43, 0x5f, 0x52, 0x6f,
	0x6f, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x2e, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x15, 0x53, 0x43, 0x5f,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x12, 0x53, 0x43, 0x5f, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x1a, 0x09, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x18, 0x53, 0x43,
	0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x1a, 0x09, 0x2e, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0e, 0x53, 0x43, 0x5f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x1a, 0x09, 0x2e, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0e, 0x53, 0x43, 0x5f,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x1a, 0x09, 0x2e, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0b, 0x53, 0x43, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0e, 0x53, 0x43, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0c, 0x53, 0x43, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x28, 0x0a, 0x07, 0x46, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x44, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x09, 0x2e, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x08, 0x46, 0x64, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x44, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_frame_sync_proto_rawDescOnce sync.Once
	file_frame_sync_proto_rawDescData = file_frame_sync_proto_rawDesc
)

func file_frame_sync_proto_rawDescGZIP() []byte {
	file_frame_sync_proto_rawDescOnce.Do(func() {
		file_frame_sync_proto_rawDescData = protoimpl.X.CompressGZIP(file_frame_sync_proto_rawDescData)
	})
	return file_frame_sync_proto_rawDescData
}

var file_frame_sync_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_frame_sync_proto_goTypes = []interface{}{
	(*RoomBaseInfo)(nil),       // 0: pb.RoomBaseInfo
	(*PlayerBase)(nil),         // 1: pb.PlayerBase
	(*PlayerState)(nil),        // 2: pb.PlayerState
	(*PlayerResumeGame)(nil),   // 3: pb.PlayerResumeGame
	(*PlayerReady)(nil),        // 4: pb.PlayerReady
	(*ReqRoomHistory)(nil),     // 5: pb.ReqRoomHistory
	(*RoomHistorySets)(nil),    // 6: pb.RoomHistorySets
	(*RoomHistory)(nil),        // 7: pb.RoomHistory
	(*GameOver)(nil),           // 8: pb.GameOver
	(*PlayerOver)(nil),         // 9: pb.PlayerOver
	(*OtherPlayerOffline)(nil), // 10: pb.OtherPlayerOffline
	(*StartBattle)(nil),        // 11: pb.StartBattle
	(*EnterBattle)(nil),        // 12: pb.EnterBattle
	(*LogicFrame)(nil),         // 13: pb.LogicFrame
	(*Operation)(nil),          // 14: pb.Operation
	(*ReadyTimeout)(nil),       // 15: pb.ReadyTimeout
	(*RestartGame)(nil),        // 16: pb.RestartGame
	(*Heartbeat)(nil),          // 17: pb.Heartbeat
	(*FDCloseEvent)(nil),       // 18: pb.FDCloseEvent
	(*FDCreateEvent)(nil),      // 19: pb.FDCreateEvent
	(*Empty)(nil),              // 20: pb.Empty
}
var file_frame_sync_proto_depIdxs = []int32{
	7,  // 0: pb.RoomHistorySets.Sets:type_name -> pb.RoomHistory
	14, // 1: pb.LogicFrame.operations:type_name -> pb.Operation
	4,  // 2: pb.FrameSync.CS_PlayerReady:input_type -> pb.PlayerReady
	13, // 3: pb.FrameSync.CS_PlayerOperations:input_type -> pb.LogicFrame
	3,  // 4: pb.FrameSync.CS_PlayerResumeGame:input_type -> pb.PlayerResumeGame
	9,  // 5: pb.FrameSync.CS_PlayerOver:input_type -> pb.PlayerOver
	5,  // 6: pb.FrameSync.CS_RoomHistory:input_type -> pb.ReqRoomHistory
	0,  // 7: pb.FrameSync.CS_RoomBaseInfo:input_type -> pb.RoomBaseInfo
	1,  // 8: pb.FrameSync.CS_PlayerState:input_type -> pb.PlayerBase
	17, // 9: pb.FrameSync.CS_Heartbeat:input_type -> pb.Heartbeat
	15, // 10: pb.FrameSync.SC_ReadyTimeout:input_type -> pb.ReadyTimeout
	12, // 11: pb.FrameSync.SC_EnterBattle:input_type -> pb.EnterBattle
	13, // 12: pb.FrameSync.SC_LogicFrame:input_type -> pb.LogicFrame
	6,  // 13: pb.FrameSync.SC_RoomHistory:input_type -> pb.RoomHistorySets
	0,  // 14: pb.FrameSync.SC_RoomBaseInfo:input_type -> pb.RoomBaseInfo
	10, // 15: pb.FrameSync.SC_OtherPlayerOffline:input_type -> pb.OtherPlayerOffline
	9,  // 16: pb.FrameSync.SC_OtherPlayerOver:input_type -> pb.PlayerOver
	3,  // 17: pb.FrameSync.SC_OtherPlayerResumeGame:input_type -> pb.PlayerResumeGame
	11, // 18: pb.FrameSync.SC_StartBattle:input_type -> pb.StartBattle
	16, // 19: pb.FrameSync.SC_RestartGame:input_type -> pb.RestartGame
	8,  // 20: pb.FrameSync.SC_GameOver:input_type -> pb.GameOver
	2,  // 21: pb.FrameSync.SC_PlayerState:input_type -> pb.PlayerState
	17, // 22: pb.FrameSync.SC_Heartbeat:input_type -> pb.Heartbeat
	18, // 23: pb.FrameSync.FdClose:input_type -> pb.FDCloseEvent
	19, // 24: pb.FrameSync.FdCreate:input_type -> pb.FDCreateEvent
	20, // 25: pb.FrameSync.CS_PlayerReady:output_type -> pb.Empty
	20, // 26: pb.FrameSync.CS_PlayerOperations:output_type -> pb.Empty
	20, // 27: pb.FrameSync.CS_PlayerResumeGame:output_type -> pb.Empty
	20, // 28: pb.FrameSync.CS_PlayerOver:output_type -> pb.Empty
	20, // 29: pb.FrameSync.CS_RoomHistory:output_type -> pb.Empty
	20, // 30: pb.FrameSync.CS_RoomBaseInfo:output_type -> pb.Empty
	20, // 31: pb.FrameSync.CS_PlayerState:output_type -> pb.Empty
	20, // 32: pb.FrameSync.CS_Heartbeat:output_type -> pb.Empty
	20, // 33: pb.FrameSync.SC_ReadyTimeout:output_type -> pb.Empty
	20, // 34: pb.FrameSync.SC_EnterBattle:output_type -> pb.Empty
	20, // 35: pb.FrameSync.SC_LogicFrame:output_type -> pb.Empty
	20, // 36: pb.FrameSync.SC_RoomHistory:output_type -> pb.Empty
	20, // 37: pb.FrameSync.SC_RoomBaseInfo:output_type -> pb.Empty
	20, // 38: pb.FrameSync.SC_OtherPlayerOffline:output_type -> pb.Empty
	20, // 39: pb.FrameSync.SC_OtherPlayerOver:output_type -> pb.Empty
	20, // 40: pb.FrameSync.SC_OtherPlayerResumeGame:output_type -> pb.Empty
	20, // 41: pb.FrameSync.SC_StartBattle:output_type -> pb.Empty
	20, // 42: pb.FrameSync.SC_RestartGame:output_type -> pb.Empty
	20, // 43: pb.FrameSync.SC_GameOver:output_type -> pb.Empty
	20, // 44: pb.FrameSync.SC_PlayerState:output_type -> pb.Empty
	20, // 45: pb.FrameSync.SC_Heartbeat:output_type -> pb.Empty
	20, // 46: pb.FrameSync.FdClose:output_type -> pb.Empty
	20, // 47: pb.FrameSync.FdCreate:output_type -> pb.Empty
	25, // [25:48] is the sub-list for method output_type
	2,  // [2:25] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_frame_sync_proto_init() }
func file_frame_sync_proto_init() {
	if File_frame_sync_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_frame_sync_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frame_sync_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frame_sync_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frame_sync_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerResumeGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frame_sync_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frame_sync_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqRoomHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frame_sync_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomHistorySets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frame_sync_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frame_sync_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameOver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frame_sync_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerOver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frame_sync_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtherPlayerOffline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frame_sync_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBattle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frame_sync_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterBattle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frame_sync_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frame_sync_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frame_sync_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadyTimeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frame_sync_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frame_sync_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_frame_sync_proto_goTypes,
		DependencyIndexes: file_frame_sync_proto_depIdxs,
		MessageInfos:      file_frame_sync_proto_msgTypes,
	}.Build()
	File_frame_sync_proto = out.File
	file_frame_sync_proto_rawDesc = nil
	file_frame_sync_proto_goTypes = nil
	file_frame_sync_proto_depIdxs = nil
}
