// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.22.2
// source: game_match.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameMatchSign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid  int32                  `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	RuleId     int32                  `protobuf:"varint,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	GroupId    int32                  `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Addition   string                 `protobuf:"bytes,4,opt,name=addition,proto3" json:"addition,omitempty"`
	PlayerSets []*GameMatchSignPlayer `protobuf:"bytes,5,rep,name=player_sets,json=playerSets,proto3" json:"player_sets,omitempty"`
}

func (x *GameMatchSign) Reset() {
	*x = GameMatchSign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMatchSign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMatchSign) ProtoMessage() {}

func (x *GameMatchSign) ProtoReflect() protoreflect.Message {
	mi := &file_game_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMatchSign.ProtoReflect.Descriptor instead.
func (*GameMatchSign) Descriptor() ([]byte, []int) {
	return file_game_match_proto_rawDescGZIP(), []int{0}
}

func (x *GameMatchSign) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *GameMatchSign) GetRuleId() int32 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *GameMatchSign) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GameMatchSign) GetAddition() string {
	if x != nil {
		return x.Addition
	}
	return ""
}

func (x *GameMatchSign) GetPlayerSets() []*GameMatchSignPlayer {
	if x != nil {
		return x.PlayerSets
	}
	return nil
}

type GameMatchSignPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        int32            `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	WeightAttr map[string]int32 `protobuf:"bytes,2,rep,name=weight_attr,json=weightAttr,proto3" json:"weight_attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GameMatchSignPlayer) Reset() {
	*x = GameMatchSignPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMatchSignPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMatchSignPlayer) ProtoMessage() {}

func (x *GameMatchSignPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_game_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMatchSignPlayer.ProtoReflect.Descriptor instead.
func (*GameMatchSignPlayer) Descriptor() ([]byte, []int) {
	return file_game_match_proto_rawDescGZIP(), []int{1}
}

func (x *GameMatchSignPlayer) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GameMatchSignPlayer) GetWeightAttr() map[string]int32 {
	if x != nil {
		return x.WeightAttr
	}
	return nil
}

type GameMatchPlayerCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid int32 `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	RuleId    int32 `protobuf:"varint,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	GroupId   int32 `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *GameMatchPlayerCancel) Reset() {
	*x = GameMatchPlayerCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_match_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMatchPlayerCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMatchPlayerCancel) ProtoMessage() {}

func (x *GameMatchPlayerCancel) ProtoReflect() protoreflect.Message {
	mi := &file_game_match_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMatchPlayerCancel.ProtoReflect.Descriptor instead.
func (*GameMatchPlayerCancel) Descriptor() ([]byte, []int) {
	return file_game_match_proto_rawDescGZIP(), []int{2}
}

func (x *GameMatchPlayerCancel) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *GameMatchPlayerCancel) GetRuleId() int32 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *GameMatchPlayerCancel) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type GameMatchOptResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUid int32  `protobuf:"varint,1,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	GroupId   int32  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Msg       string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	RoomId    string `protobuf:"bytes,4,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Code      int32  `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GameMatchOptResult) Reset() {
	*x = GameMatchOptResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_match_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMatchOptResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMatchOptResult) ProtoMessage() {}

func (x *GameMatchOptResult) ProtoReflect() protoreflect.Message {
	mi := &file_game_match_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMatchOptResult.ProtoReflect.Descriptor instead.
func (*GameMatchOptResult) Descriptor() ([]byte, []int) {
	return file_game_match_proto_rawDescGZIP(), []int{3}
}

func (x *GameMatchOptResult) GetSourceUid() int32 {
	if x != nil {
		return x.SourceUid
	}
	return 0
}

func (x *GameMatchOptResult) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GameMatchOptResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GameMatchOptResult) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GameMatchOptResult) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

var File_game_match_proto protoreflect.FileDescriptor

var file_game_match_proto_rawDesc = []byte{
	0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73, 0x22,
	0xb0, 0x01, 0x0a, 0x13, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67,
	0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0b, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67,
	0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x1a, 0x3d, 0x0a, 0x0f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x6a, 0x0a, 0x15, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x8c,
	0x01, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0xf1, 0x02,
	0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x12, 0x43,
	0x53, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67,
	0x6e, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x67, 0x6e, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x18, 0x43, 0x53, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x19, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0c, 0x43, 0x53, 0x5f, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x3c, 0x0a, 0x15, 0x53, 0x43, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x2a, 0x0a, 0x0c, 0x53, 0x43, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12,
	0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x1a, 0x09,
	0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x07, 0x46,
	0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x44, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x08, 0x46, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x44, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_game_match_proto_rawDescOnce sync.Once
	file_game_match_proto_rawDescData = file_game_match_proto_rawDesc
)

func file_game_match_proto_rawDescGZIP() []byte {
	file_game_match_proto_rawDescOnce.Do(func() {
		file_game_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_game_match_proto_rawDescData)
	})
	return file_game_match_proto_rawDescData
}

var file_game_match_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_game_match_proto_goTypes = []interface{}{
	(*GameMatchSign)(nil),         // 0: pb.GameMatchSign
	(*GameMatchSignPlayer)(nil),   // 1: pb.GameMatchSignPlayer
	(*GameMatchPlayerCancel)(nil), // 2: pb.GameMatchPlayerCancel
	(*GameMatchOptResult)(nil),    // 3: pb.GameMatchOptResult
	nil,                           // 4: pb.GameMatchSignPlayer.WeightAttrEntry
	(*Heartbeat)(nil),             // 5: pb.Heartbeat
	(*FDCloseEvent)(nil),          // 6: pb.FDCloseEvent
	(*FDCreateEvent)(nil),         // 7: pb.FDCreateEvent
	(*Empty)(nil),                 // 8: pb.Empty
}
var file_game_match_proto_depIdxs = []int32{
	1, // 0: pb.GameMatchSign.player_sets:type_name -> pb.GameMatchSignPlayer
	4, // 1: pb.GameMatchSignPlayer.weight_attr:type_name -> pb.GameMatchSignPlayer.WeightAttrEntry
	0, // 2: pb.GameMatch.CS_PlayerMatchSign:input_type -> pb.GameMatchSign
	2, // 3: pb.GameMatch.CS_PlayerMatchSignCancel:input_type -> pb.GameMatchPlayerCancel
	5, // 4: pb.GameMatch.CS_Heartbeat:input_type -> pb.Heartbeat
	3, // 5: pb.GameMatch.SC_GameMatchOptResult:input_type -> pb.GameMatchOptResult
	5, // 6: pb.GameMatch.SC_Heartbeat:input_type -> pb.Heartbeat
	6, // 7: pb.GameMatch.FdClose:input_type -> pb.FDCloseEvent
	7, // 8: pb.GameMatch.FdCreate:input_type -> pb.FDCreateEvent
	8, // 9: pb.GameMatch.CS_PlayerMatchSign:output_type -> pb.Empty
	8, // 10: pb.GameMatch.CS_PlayerMatchSignCancel:output_type -> pb.Empty
	8, // 11: pb.GameMatch.CS_Heartbeat:output_type -> pb.Empty
	8, // 12: pb.GameMatch.SC_GameMatchOptResult:output_type -> pb.Empty
	8, // 13: pb.GameMatch.SC_Heartbeat:output_type -> pb.Empty
	8, // 14: pb.GameMatch.FdClose:output_type -> pb.Empty
	8, // 15: pb.GameMatch.FdCreate:output_type -> pb.Empty
	9, // [9:16] is the sub-list for method output_type
	2, // [2:9] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_game_match_proto_init() }
func file_game_match_proto_init() {
	if File_game_match_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_game_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMatchSign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMatchSignPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_match_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMatchPlayerCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_match_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMatchOptResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_game_match_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_game_match_proto_goTypes,
		DependencyIndexes: file_game_match_proto_depIdxs,
		MessageInfos:      file_game_match_proto_msgTypes,
	}.Build()
	File_game_match_proto = out.File
	file_game_match_proto_rawDesc = nil
	file_game_match_proto_goTypes = nil
	file_game_match_proto_depIdxs = nil
}
