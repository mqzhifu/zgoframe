// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameMatchClient is the client API for GameMatch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameMatchClient interface {
	CS_PlayerMatchSign(ctx context.Context, in *GameMatchSign, opts ...grpc.CallOption) (*Empty, error)
	CS_PlayerMatchSignCancel(ctx context.Context, in *GameMatchPlayerCancel, opts ...grpc.CallOption) (*Empty, error)
	CS_Heartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*Empty, error)
	SC_GameMatchOptResult(ctx context.Context, in *GameMatchOptResult, opts ...grpc.CallOption) (*Empty, error)
	SC_Heartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*Empty, error)
	FdClose(ctx context.Context, in *FDCloseEvent, opts ...grpc.CallOption) (*Empty, error)
	FdCreate(ctx context.Context, in *FDCreateEvent, opts ...grpc.CallOption) (*Empty, error)
}

type gameMatchClient struct {
	cc grpc.ClientConnInterface
}

func NewGameMatchClient(cc grpc.ClientConnInterface) GameMatchClient {
	return &gameMatchClient{cc}
}

func (c *gameMatchClient) CS_PlayerMatchSign(ctx context.Context, in *GameMatchSign, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.GameMatch/CS_PlayerMatchSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameMatchClient) CS_PlayerMatchSignCancel(ctx context.Context, in *GameMatchPlayerCancel, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.GameMatch/CS_PlayerMatchSignCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameMatchClient) CS_Heartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.GameMatch/CS_Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameMatchClient) SC_GameMatchOptResult(ctx context.Context, in *GameMatchOptResult, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.GameMatch/SC_GameMatchOptResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameMatchClient) SC_Heartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.GameMatch/SC_Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameMatchClient) FdClose(ctx context.Context, in *FDCloseEvent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.GameMatch/FdClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameMatchClient) FdCreate(ctx context.Context, in *FDCreateEvent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.GameMatch/FdCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameMatchServer is the server API for GameMatch service.
// All implementations must embed UnimplementedGameMatchServer
// for forward compatibility
type GameMatchServer interface {
	CS_PlayerMatchSign(context.Context, *GameMatchSign) (*Empty, error)
	CS_PlayerMatchSignCancel(context.Context, *GameMatchPlayerCancel) (*Empty, error)
	CS_Heartbeat(context.Context, *Heartbeat) (*Empty, error)
	SC_GameMatchOptResult(context.Context, *GameMatchOptResult) (*Empty, error)
	SC_Heartbeat(context.Context, *Heartbeat) (*Empty, error)
	FdClose(context.Context, *FDCloseEvent) (*Empty, error)
	FdCreate(context.Context, *FDCreateEvent) (*Empty, error)
	mustEmbedUnimplementedGameMatchServer()
}

// UnimplementedGameMatchServer must be embedded to have forward compatible implementations.
type UnimplementedGameMatchServer struct {
}

func (UnimplementedGameMatchServer) CS_PlayerMatchSign(context.Context, *GameMatchSign) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_PlayerMatchSign not implemented")
}
func (UnimplementedGameMatchServer) CS_PlayerMatchSignCancel(context.Context, *GameMatchPlayerCancel) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_PlayerMatchSignCancel not implemented")
}
func (UnimplementedGameMatchServer) CS_Heartbeat(context.Context, *Heartbeat) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_Heartbeat not implemented")
}
func (UnimplementedGameMatchServer) SC_GameMatchOptResult(context.Context, *GameMatchOptResult) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_GameMatchOptResult not implemented")
}
func (UnimplementedGameMatchServer) SC_Heartbeat(context.Context, *Heartbeat) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_Heartbeat not implemented")
}
func (UnimplementedGameMatchServer) FdClose(context.Context, *FDCloseEvent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FdClose not implemented")
}
func (UnimplementedGameMatchServer) FdCreate(context.Context, *FDCreateEvent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FdCreate not implemented")
}
func (UnimplementedGameMatchServer) mustEmbedUnimplementedGameMatchServer() {}

// UnsafeGameMatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameMatchServer will
// result in compilation errors.
type UnsafeGameMatchServer interface {
	mustEmbedUnimplementedGameMatchServer()
}

func RegisterGameMatchServer(s grpc.ServiceRegistrar, srv GameMatchServer) {
	s.RegisterService(&GameMatch_ServiceDesc, srv)
}

func _GameMatch_CS_PlayerMatchSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameMatchSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameMatchServer).CS_PlayerMatchSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameMatch/CS_PlayerMatchSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameMatchServer).CS_PlayerMatchSign(ctx, req.(*GameMatchSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameMatch_CS_PlayerMatchSignCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameMatchPlayerCancel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameMatchServer).CS_PlayerMatchSignCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameMatch/CS_PlayerMatchSignCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameMatchServer).CS_PlayerMatchSignCancel(ctx, req.(*GameMatchPlayerCancel))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameMatch_CS_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Heartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameMatchServer).CS_Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameMatch/CS_Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameMatchServer).CS_Heartbeat(ctx, req.(*Heartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameMatch_SC_GameMatchOptResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameMatchOptResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameMatchServer).SC_GameMatchOptResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameMatch/SC_GameMatchOptResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameMatchServer).SC_GameMatchOptResult(ctx, req.(*GameMatchOptResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameMatch_SC_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Heartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameMatchServer).SC_Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameMatch/SC_Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameMatchServer).SC_Heartbeat(ctx, req.(*Heartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameMatch_FdClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FDCloseEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameMatchServer).FdClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameMatch/FdClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameMatchServer).FdClose(ctx, req.(*FDCloseEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameMatch_FdCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FDCreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameMatchServer).FdCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameMatch/FdCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameMatchServer).FdCreate(ctx, req.(*FDCreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// GameMatch_ServiceDesc is the grpc.ServiceDesc for GameMatch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameMatch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GameMatch",
	HandlerType: (*GameMatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CS_PlayerMatchSign",
			Handler:    _GameMatch_CS_PlayerMatchSign_Handler,
		},
		{
			MethodName: "CS_PlayerMatchSignCancel",
			Handler:    _GameMatch_CS_PlayerMatchSignCancel_Handler,
		},
		{
			MethodName: "CS_Heartbeat",
			Handler:    _GameMatch_CS_Heartbeat_Handler,
		},
		{
			MethodName: "SC_GameMatchOptResult",
			Handler:    _GameMatch_SC_GameMatchOptResult_Handler,
		},
		{
			MethodName: "SC_Heartbeat",
			Handler:    _GameMatch_SC_Heartbeat_Handler,
		},
		{
			MethodName: "FdClose",
			Handler:    _GameMatch_FdClose_Handler,
		},
		{
			MethodName: "FdCreate",
			Handler:    _GameMatch_FdCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_match.proto",
}
