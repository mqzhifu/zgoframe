// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	FdClose(ctx context.Context, in *FDCloseEvent, opts ...grpc.CallOption) (*Empty, error)
	FdCreate(ctx context.Context, in *FDCreateEvent, opts ...grpc.CallOption) (*Empty, error)
	CS_Login(ctx context.Context, in *Login, opts ...grpc.CallOption) (*LoginRes, error)
	CS_Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PongRes, error)
	CS_Pong(ctx context.Context, in *PongRes, opts ...grpc.CallOption) (*PingReq, error)
	CS_Heartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*Empty, error)
	SC_Login(ctx context.Context, in *LoginRes, opts ...grpc.CallOption) (*Empty, error)
	SC_Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PongRes, error)
	SC_Pong(ctx context.Context, in *PongRes, opts ...grpc.CallOption) (*PingReq, error)
	SC_Heartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*Empty, error)
	SC_KickOff(ctx context.Context, in *KickOff, opts ...grpc.CallOption) (*Empty, error)
	SC_ProjectPushMsg(ctx context.Context, in *ProjectPushMsg, opts ...grpc.CallOption) (*Empty, error)
	SC_SendMsg(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Empty, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) FdClose(ctx context.Context, in *FDCloseEvent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Gateway/FdClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) FdCreate(ctx context.Context, in *FDCreateEvent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Gateway/FdCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CS_Login(ctx context.Context, in *Login, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/pb.Gateway/CS_Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CS_Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PongRes, error) {
	out := new(PongRes)
	err := c.cc.Invoke(ctx, "/pb.Gateway/CS_Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CS_Pong(ctx context.Context, in *PongRes, opts ...grpc.CallOption) (*PingReq, error) {
	out := new(PingReq)
	err := c.cc.Invoke(ctx, "/pb.Gateway/CS_Pong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CS_Heartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Gateway/CS_Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) SC_Login(ctx context.Context, in *LoginRes, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Gateway/SC_Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) SC_Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PongRes, error) {
	out := new(PongRes)
	err := c.cc.Invoke(ctx, "/pb.Gateway/SC_Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) SC_Pong(ctx context.Context, in *PongRes, opts ...grpc.CallOption) (*PingReq, error) {
	out := new(PingReq)
	err := c.cc.Invoke(ctx, "/pb.Gateway/SC_Pong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) SC_Heartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Gateway/SC_Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) SC_KickOff(ctx context.Context, in *KickOff, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Gateway/SC_KickOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) SC_ProjectPushMsg(ctx context.Context, in *ProjectPushMsg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Gateway/SC_ProjectPushMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) SC_SendMsg(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Gateway/SC_SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	FdClose(context.Context, *FDCloseEvent) (*Empty, error)
	FdCreate(context.Context, *FDCreateEvent) (*Empty, error)
	CS_Login(context.Context, *Login) (*LoginRes, error)
	CS_Ping(context.Context, *PingReq) (*PongRes, error)
	CS_Pong(context.Context, *PongRes) (*PingReq, error)
	CS_Heartbeat(context.Context, *Heartbeat) (*Empty, error)
	SC_Login(context.Context, *LoginRes) (*Empty, error)
	SC_Ping(context.Context, *PingReq) (*PongRes, error)
	SC_Pong(context.Context, *PongRes) (*PingReq, error)
	SC_Heartbeat(context.Context, *Heartbeat) (*Empty, error)
	SC_KickOff(context.Context, *KickOff) (*Empty, error)
	SC_ProjectPushMsg(context.Context, *ProjectPushMsg) (*Empty, error)
	SC_SendMsg(context.Context, *Msg) (*Empty, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) FdClose(context.Context, *FDCloseEvent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FdClose not implemented")
}
func (UnimplementedGatewayServer) FdCreate(context.Context, *FDCreateEvent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FdCreate not implemented")
}
func (UnimplementedGatewayServer) CS_Login(context.Context, *Login) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_Login not implemented")
}
func (UnimplementedGatewayServer) CS_Ping(context.Context, *PingReq) (*PongRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_Ping not implemented")
}
func (UnimplementedGatewayServer) CS_Pong(context.Context, *PongRes) (*PingReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_Pong not implemented")
}
func (UnimplementedGatewayServer) CS_Heartbeat(context.Context, *Heartbeat) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_Heartbeat not implemented")
}
func (UnimplementedGatewayServer) SC_Login(context.Context, *LoginRes) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_Login not implemented")
}
func (UnimplementedGatewayServer) SC_Ping(context.Context, *PingReq) (*PongRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_Ping not implemented")
}
func (UnimplementedGatewayServer) SC_Pong(context.Context, *PongRes) (*PingReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_Pong not implemented")
}
func (UnimplementedGatewayServer) SC_Heartbeat(context.Context, *Heartbeat) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_Heartbeat not implemented")
}
func (UnimplementedGatewayServer) SC_KickOff(context.Context, *KickOff) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_KickOff not implemented")
}
func (UnimplementedGatewayServer) SC_ProjectPushMsg(context.Context, *ProjectPushMsg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_ProjectPushMsg not implemented")
}
func (UnimplementedGatewayServer) SC_SendMsg(context.Context, *Msg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_SendMsg not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_FdClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FDCloseEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).FdClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gateway/FdClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).FdClose(ctx, req.(*FDCloseEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_FdCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FDCreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).FdCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gateway/FdCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).FdCreate(ctx, req.(*FDCreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CS_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CS_Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gateway/CS_Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CS_Login(ctx, req.(*Login))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CS_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CS_Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gateway/CS_Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CS_Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CS_Pong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PongRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CS_Pong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gateway/CS_Pong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CS_Pong(ctx, req.(*PongRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CS_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Heartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CS_Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gateway/CS_Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CS_Heartbeat(ctx, req.(*Heartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_SC_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).SC_Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gateway/SC_Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).SC_Login(ctx, req.(*LoginRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_SC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).SC_Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gateway/SC_Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).SC_Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_SC_Pong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PongRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).SC_Pong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gateway/SC_Pong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).SC_Pong(ctx, req.(*PongRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_SC_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Heartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).SC_Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gateway/SC_Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).SC_Heartbeat(ctx, req.(*Heartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_SC_KickOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickOff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).SC_KickOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gateway/SC_KickOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).SC_KickOff(ctx, req.(*KickOff))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_SC_ProjectPushMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectPushMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).SC_ProjectPushMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gateway/SC_ProjectPushMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).SC_ProjectPushMsg(ctx, req.(*ProjectPushMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_SC_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).SC_SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gateway/SC_SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).SC_SendMsg(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FdClose",
			Handler:    _Gateway_FdClose_Handler,
		},
		{
			MethodName: "FdCreate",
			Handler:    _Gateway_FdCreate_Handler,
		},
		{
			MethodName: "CS_Login",
			Handler:    _Gateway_CS_Login_Handler,
		},
		{
			MethodName: "CS_Ping",
			Handler:    _Gateway_CS_Ping_Handler,
		},
		{
			MethodName: "CS_Pong",
			Handler:    _Gateway_CS_Pong_Handler,
		},
		{
			MethodName: "CS_Heartbeat",
			Handler:    _Gateway_CS_Heartbeat_Handler,
		},
		{
			MethodName: "SC_Login",
			Handler:    _Gateway_SC_Login_Handler,
		},
		{
			MethodName: "SC_Ping",
			Handler:    _Gateway_SC_Ping_Handler,
		},
		{
			MethodName: "SC_Pong",
			Handler:    _Gateway_SC_Pong_Handler,
		},
		{
			MethodName: "SC_Heartbeat",
			Handler:    _Gateway_SC_Heartbeat_Handler,
		},
		{
			MethodName: "SC_KickOff",
			Handler:    _Gateway_SC_KickOff_Handler,
		},
		{
			MethodName: "SC_ProjectPushMsg",
			Handler:    _Gateway_SC_ProjectPushMsg_Handler,
		},
		{
			MethodName: "SC_SendMsg",
			Handler:    _Gateway_SC_SendMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}
