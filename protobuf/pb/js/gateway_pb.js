// source: gateway.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.pb.CfgProtoMap', null, global);
goog.exportSymbol('proto.pb.CfgProtoServiceFunc', null, global);
goog.exportSymbol('proto.pb.CfgServer', null, global);
goog.exportSymbol('proto.pb.KickOff', null, global);
goog.exportSymbol('proto.pb.Login', null, global);
goog.exportSymbol('proto.pb.LoginRes', null, global);
goog.exportSymbol('proto.pb.Msg', null, global);
goog.exportSymbol('proto.pb.ProjectPushMsg', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Msg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Msg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Msg.displayName = 'proto.pb.Msg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Login = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Login, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Login.displayName = 'proto.pb.Login';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.LoginRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.LoginRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.LoginRes.displayName = 'proto.pb.LoginRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ProjectPushMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ProjectPushMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ProjectPushMsg.displayName = 'proto.pb.ProjectPushMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.KickOff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.KickOff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.KickOff.displayName = 'proto.pb.KickOff';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.CfgServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.CfgServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.CfgServer.displayName = 'proto.pb.CfgServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.CfgProtoMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.CfgProtoMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.CfgProtoMap.displayName = 'proto.pb.CfgProtoMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.CfgProtoServiceFunc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.CfgProtoServiceFunc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.CfgProtoServiceFunc.displayName = 'proto.pb.CfgProtoServiceFunc';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Msg.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Msg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Msg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Msg.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceUid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sidFid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    dataLength: jspb.Message.getFieldWithDefault(msg, 4, 0),
    contentType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    protocolType: jspb.Message.getFieldWithDefault(msg, 6, 0),
    serviceId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    funcId: jspb.Message.getFieldWithDefault(msg, 8, 0),
    reserved: jspb.Message.getFieldWithDefault(msg, 9, ""),
    content: jspb.Message.getFieldWithDefault(msg, 10, ""),
    endChar: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Msg}
 */
proto.pb.Msg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Msg;
  return proto.pb.Msg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Msg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Msg}
 */
proto.pb.Msg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSourceUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSidFid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDataLength(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContentType(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProtocolType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServiceId(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFuncId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setReserved(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndChar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Msg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Msg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Msg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Msg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceUid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSidFid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDataLength();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getContentType();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getProtocolType();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getServiceId();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getFuncId();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getReserved();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getEndChar();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional int32 source_uid = 1;
 * @return {number}
 */
proto.pb.Msg.prototype.getSourceUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Msg} returns this
 */
proto.pb.Msg.prototype.setSourceUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.pb.Msg.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Msg} returns this
 */
proto.pb.Msg.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 sid_fid = 3;
 * @return {number}
 */
proto.pb.Msg.prototype.getSidFid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Msg} returns this
 */
proto.pb.Msg.prototype.setSidFid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 data_length = 4;
 * @return {number}
 */
proto.pb.Msg.prototype.getDataLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Msg} returns this
 */
proto.pb.Msg.prototype.setDataLength = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 content_type = 5;
 * @return {number}
 */
proto.pb.Msg.prototype.getContentType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Msg} returns this
 */
proto.pb.Msg.prototype.setContentType = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 protocol_type = 6;
 * @return {number}
 */
proto.pb.Msg.prototype.getProtocolType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Msg} returns this
 */
proto.pb.Msg.prototype.setProtocolType = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 service_id = 7;
 * @return {number}
 */
proto.pb.Msg.prototype.getServiceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Msg} returns this
 */
proto.pb.Msg.prototype.setServiceId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 func_id = 8;
 * @return {number}
 */
proto.pb.Msg.prototype.getFuncId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Msg} returns this
 */
proto.pb.Msg.prototype.setFuncId = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string reserved = 9;
 * @return {string}
 */
proto.pb.Msg.prototype.getReserved = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Msg} returns this
 */
proto.pb.Msg.prototype.setReserved = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string content = 10;
 * @return {string}
 */
proto.pb.Msg.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Msg} returns this
 */
proto.pb.Msg.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string end_char = 11;
 * @return {string}
 */
proto.pb.Msg.prototype.getEndChar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Msg} returns this
 */
proto.pb.Msg.prototype.setEndChar = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Login.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Login.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Login} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Login.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceUid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Login}
 */
proto.pb.Login.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Login;
  return proto.pb.Login.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Login} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Login}
 */
proto.pb.Login.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSourceUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Login.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Login.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Login} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Login.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceUid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 source_uid = 1;
 * @return {number}
 */
proto.pb.Login.prototype.getSourceUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Login} returns this
 */
proto.pb.Login.prototype.setSourceUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.pb.Login.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Login} returns this
 */
proto.pb.Login.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.LoginRes.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.LoginRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.LoginRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.LoginRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errmsg: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.LoginRes}
 */
proto.pb.LoginRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.LoginRes;
  return proto.pb.LoginRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.LoginRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.LoginRes}
 */
proto.pb.LoginRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrmsg(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.LoginRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.LoginRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.LoginRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.LoginRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrmsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.pb.LoginRes.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.LoginRes} returns this
 */
proto.pb.LoginRes.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string errMsg = 2;
 * @return {string}
 */
proto.pb.LoginRes.prototype.getErrmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.LoginRes} returns this
 */
proto.pb.LoginRes.prototype.setErrmsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 uid = 3;
 * @return {number}
 */
proto.pb.LoginRes.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.LoginRes} returns this
 */
proto.pb.LoginRes.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ProjectPushMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ProjectPushMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ProjectPushMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ProjectPushMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceUid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    projectId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serviceId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    funcId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    targetUids: jspb.Message.getFieldWithDefault(msg, 5, ""),
    msg: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ProjectPushMsg}
 */
proto.pb.ProjectPushMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ProjectPushMsg;
  return proto.pb.ProjectPushMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ProjectPushMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ProjectPushMsg}
 */
proto.pb.ProjectPushMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSourceUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProjectId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServiceId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFuncId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetUids(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ProjectPushMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ProjectPushMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ProjectPushMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ProjectPushMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceUid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getProjectId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getServiceId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFuncId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTargetUids();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 source_uid = 1;
 * @return {number}
 */
proto.pb.ProjectPushMsg.prototype.getSourceUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ProjectPushMsg} returns this
 */
proto.pb.ProjectPushMsg.prototype.setSourceUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 project_id = 2;
 * @return {number}
 */
proto.pb.ProjectPushMsg.prototype.getProjectId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ProjectPushMsg} returns this
 */
proto.pb.ProjectPushMsg.prototype.setProjectId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 service_id = 3;
 * @return {number}
 */
proto.pb.ProjectPushMsg.prototype.getServiceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ProjectPushMsg} returns this
 */
proto.pb.ProjectPushMsg.prototype.setServiceId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 func_id = 4;
 * @return {number}
 */
proto.pb.ProjectPushMsg.prototype.getFuncId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ProjectPushMsg} returns this
 */
proto.pb.ProjectPushMsg.prototype.setFuncId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string target_uids = 5;
 * @return {string}
 */
proto.pb.ProjectPushMsg.prototype.getTargetUids = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.ProjectPushMsg} returns this
 */
proto.pb.ProjectPushMsg.prototype.setTargetUids = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string msg = 6;
 * @return {string}
 */
proto.pb.ProjectPushMsg.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.ProjectPushMsg} returns this
 */
proto.pb.ProjectPushMsg.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.KickOff.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.KickOff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.KickOff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.KickOff.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceUid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.KickOff}
 */
proto.pb.KickOff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.KickOff;
  return proto.pb.KickOff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.KickOff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.KickOff}
 */
proto.pb.KickOff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSourceUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.KickOff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.KickOff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.KickOff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.KickOff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceUid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int32 source_uid = 1;
 * @return {number}
 */
proto.pb.KickOff.prototype.getSourceUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.KickOff} returns this
 */
proto.pb.KickOff.prototype.setSourceUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 time = 2;
 * @return {number}
 */
proto.pb.KickOff.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.KickOff} returns this
 */
proto.pb.KickOff.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.CfgServer.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.CfgServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.CfgServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CfgServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    listenip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    outip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    outdomain: jspb.Message.getFieldWithDefault(msg, 3, ""),
    wsport: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tcpport: jspb.Message.getFieldWithDefault(msg, 5, ""),
    udpport: jspb.Message.getFieldWithDefault(msg, 6, ""),
    wsuri: jspb.Message.getFieldWithDefault(msg, 7, ""),
    defaultprotocoltype: jspb.Message.getFieldWithDefault(msg, 8, 0),
    defaultcontenttype: jspb.Message.getFieldWithDefault(msg, 9, 0),
    loginauthtype: jspb.Message.getFieldWithDefault(msg, 10, ""),
    loginauthsecretkey: jspb.Message.getFieldWithDefault(msg, 11, ""),
    maxclientconnnum: jspb.Message.getFieldWithDefault(msg, 12, 0),
    msgcontentmax: jspb.Message.getFieldWithDefault(msg, 13, 0),
    iotimeout: jspb.Message.getFieldWithDefault(msg, 14, 0),
    conntimeout: jspb.Message.getFieldWithDefault(msg, 15, 0),
    clientheartbeattime: jspb.Message.getFieldWithDefault(msg, 16, 0),
    serverheartbeattime: jspb.Message.getFieldWithDefault(msg, 17, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.CfgServer}
 */
proto.pb.CfgServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.CfgServer;
  return proto.pb.CfgServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.CfgServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.CfgServer}
 */
proto.pb.CfgServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setListenip(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutip(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutdomain(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWsport(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTcpport(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUdpport(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setWsuri(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefaultprotocoltype(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefaultcontenttype(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoginauthtype(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoginauthsecretkey(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxclientconnnum(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgcontentmax(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIotimeout(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConntimeout(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientheartbeattime(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerheartbeattime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.CfgServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.CfgServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.CfgServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CfgServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListenip();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOutip();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOutdomain();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWsport();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTcpport();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUdpport();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getWsuri();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDefaultprotocoltype();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getDefaultcontenttype();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getLoginauthtype();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getLoginauthsecretkey();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getMaxclientconnnum();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getMsgcontentmax();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getIotimeout();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getConntimeout();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getClientheartbeattime();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getServerheartbeattime();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
};


/**
 * optional string ListenIp = 1;
 * @return {string}
 */
proto.pb.CfgServer.prototype.getListenip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setListenip = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string OutIp = 2;
 * @return {string}
 */
proto.pb.CfgServer.prototype.getOutip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setOutip = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string OutDomain = 3;
 * @return {string}
 */
proto.pb.CfgServer.prototype.getOutdomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setOutdomain = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string WsPort = 4;
 * @return {string}
 */
proto.pb.CfgServer.prototype.getWsport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setWsport = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string TcpPort = 5;
 * @return {string}
 */
proto.pb.CfgServer.prototype.getTcpport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setTcpport = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string UdpPort = 6;
 * @return {string}
 */
proto.pb.CfgServer.prototype.getUdpport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setUdpport = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string WsUri = 7;
 * @return {string}
 */
proto.pb.CfgServer.prototype.getWsuri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setWsuri = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 DefaultProtocolType = 8;
 * @return {number}
 */
proto.pb.CfgServer.prototype.getDefaultprotocoltype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setDefaultprotocoltype = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 DefaultContentType = 9;
 * @return {number}
 */
proto.pb.CfgServer.prototype.getDefaultcontenttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setDefaultcontenttype = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string LoginAuthType = 10;
 * @return {string}
 */
proto.pb.CfgServer.prototype.getLoginauthtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setLoginauthtype = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string LoginAuthSecretKey = 11;
 * @return {string}
 */
proto.pb.CfgServer.prototype.getLoginauthsecretkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setLoginauthsecretkey = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 MaxClientConnNum = 12;
 * @return {number}
 */
proto.pb.CfgServer.prototype.getMaxclientconnnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setMaxclientconnnum = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 MsgContentMax = 13;
 * @return {number}
 */
proto.pb.CfgServer.prototype.getMsgcontentmax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setMsgcontentmax = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 IOTimeout = 14;
 * @return {number}
 */
proto.pb.CfgServer.prototype.getIotimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setIotimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 ConnTimeout = 15;
 * @return {number}
 */
proto.pb.CfgServer.prototype.getConntimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setConntimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 ClientHeartbeatTime = 16;
 * @return {number}
 */
proto.pb.CfgServer.prototype.getClientheartbeattime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setClientheartbeattime = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 ServerHeartbeatTime = 17;
 * @return {number}
 */
proto.pb.CfgServer.prototype.getServerheartbeattime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.CfgServer} returns this
 */
proto.pb.CfgServer.prototype.setServerheartbeattime = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.CfgProtoMap.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.CfgProtoMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.CfgProtoMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CfgProtoMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientMap: (f = msg.getClientMap()) ? f.toObject(includeInstance, proto.pb.CfgProtoServiceFunc.toObject) : [],
    serverMap: (f = msg.getServerMap()) ? f.toObject(includeInstance, proto.pb.CfgProtoServiceFunc.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.CfgProtoMap}
 */
proto.pb.CfgProtoMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.CfgProtoMap;
  return proto.pb.CfgProtoMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.CfgProtoMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.CfgProtoMap}
 */
proto.pb.CfgProtoMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getClientMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.pb.CfgProtoServiceFunc.deserializeBinaryFromReader, 0, new proto.pb.CfgProtoServiceFunc());
         });
      break;
    case 2:
      var value = msg.getServerMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.pb.CfgProtoServiceFunc.deserializeBinaryFromReader, 0, new proto.pb.CfgProtoServiceFunc());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.CfgProtoMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.CfgProtoMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.CfgProtoMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CfgProtoMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.pb.CfgProtoServiceFunc.serializeBinaryToWriter);
  }
  f = message.getServerMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.pb.CfgProtoServiceFunc.serializeBinaryToWriter);
  }
};


/**
 * map<int32, CfgProtoServiceFunc> client = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.pb.CfgProtoServiceFunc>}
 */
proto.pb.CfgProtoMap.prototype.getClientMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.pb.CfgProtoServiceFunc>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.pb.CfgProtoServiceFunc));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pb.CfgProtoMap} returns this
 */
proto.pb.CfgProtoMap.prototype.clearClientMap = function() {
  this.getClientMap().clear();
  return this;};


/**
 * map<int32, CfgProtoServiceFunc> server = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.pb.CfgProtoServiceFunc>}
 */
proto.pb.CfgProtoMap.prototype.getServerMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.pb.CfgProtoServiceFunc>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.pb.CfgProtoServiceFunc));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pb.CfgProtoMap} returns this
 */
proto.pb.CfgProtoMap.prototype.clearServerMap = function() {
  this.getServerMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.CfgProtoServiceFunc.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.CfgProtoServiceFunc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.CfgProtoServiceFunc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CfgProtoServiceFunc.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serviceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    funcId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    funcName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    response: jspb.Message.getFieldWithDefault(msg, 6, ""),
    request: jspb.Message.getFieldWithDefault(msg, 7, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 8, ""),
    demo: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.CfgProtoServiceFunc}
 */
proto.pb.CfgProtoServiceFunc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.CfgProtoServiceFunc;
  return proto.pb.CfgProtoServiceFunc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.CfgProtoServiceFunc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.CfgProtoServiceFunc}
 */
proto.pb.CfgProtoServiceFunc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFuncId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFuncName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponse(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequest(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.CfgProtoServiceFunc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.CfgProtoServiceFunc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.CfgProtoServiceFunc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CfgProtoServiceFunc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getServiceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFuncId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFuncName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getResponse();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRequest();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDemo();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pb.CfgProtoServiceFunc.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.CfgProtoServiceFunc} returns this
 */
proto.pb.CfgProtoServiceFunc.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string service_id = 2;
 * @return {string}
 */
proto.pb.CfgProtoServiceFunc.prototype.getServiceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.CfgProtoServiceFunc} returns this
 */
proto.pb.CfgProtoServiceFunc.prototype.setServiceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string func_id = 3;
 * @return {string}
 */
proto.pb.CfgProtoServiceFunc.prototype.getFuncId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.CfgProtoServiceFunc} returns this
 */
proto.pb.CfgProtoServiceFunc.prototype.setFuncId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string func_name = 4;
 * @return {string}
 */
proto.pb.CfgProtoServiceFunc.prototype.getFuncName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.CfgProtoServiceFunc} returns this
 */
proto.pb.CfgProtoServiceFunc.prototype.setFuncName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string response = 6;
 * @return {string}
 */
proto.pb.CfgProtoServiceFunc.prototype.getResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.CfgProtoServiceFunc} returns this
 */
proto.pb.CfgProtoServiceFunc.prototype.setResponse = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string request = 7;
 * @return {string}
 */
proto.pb.CfgProtoServiceFunc.prototype.getRequest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.CfgProtoServiceFunc} returns this
 */
proto.pb.CfgProtoServiceFunc.prototype.setRequest = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string desc = 8;
 * @return {string}
 */
proto.pb.CfgProtoServiceFunc.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.CfgProtoServiceFunc} returns this
 */
proto.pb.CfgProtoServiceFunc.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string demo = 9;
 * @return {string}
 */
proto.pb.CfgProtoServiceFunc.prototype.getDemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.CfgProtoServiceFunc} returns this
 */
proto.pb.CfgProtoServiceFunc.prototype.setDemo = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


goog.object.extend(exports, proto.pb);
