// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TwinAgoraClient is the client API for TwinAgora service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwinAgoraClient interface {
	CS_Heartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*Empty, error)
	CS_CallPeople(ctx context.Context, in *CallPeopleReq, opts ...grpc.CallOption) (*Empty, error)
	CS_CancelCallPeople(ctx context.Context, in *CancelCallPeopleReq, opts ...grpc.CallOption) (*Empty, error)
	CS_PeopleEntry(ctx context.Context, in *PeopleEntry, opts ...grpc.CallOption) (*Empty, error)
	CS_PeopleLeave(ctx context.Context, in *PeopleLeaveRes, opts ...grpc.CallOption) (*Empty, error)
	CS_CallPeopleAccept(ctx context.Context, in *CallVote, opts ...grpc.CallOption) (*Empty, error)
	CS_CallPeopleDeny(ctx context.Context, in *CallVote, opts ...grpc.CallOption) (*Empty, error)
	CS_RoomHeartbeat(ctx context.Context, in *RoomHeartbeatReq, opts ...grpc.CallOption) (*Empty, error)
	SC_CallPeople(ctx context.Context, in *CallPeopleRes, opts ...grpc.CallOption) (*Empty, error)
	SC_CancelCallPeople(ctx context.Context, in *CancelCallPeopleReq, opts ...grpc.CallOption) (*Empty, error)
	SC_PeopleEntry(ctx context.Context, in *PeopleEntry, opts ...grpc.CallOption) (*Empty, error)
	SC_PeopleLeave(ctx context.Context, in *PeopleLeaveRes, opts ...grpc.CallOption) (*Empty, error)
	SC_CallReply(ctx context.Context, in *CallReply, opts ...grpc.CallOption) (*Empty, error)
	SC_CallPeopleAccept(ctx context.Context, in *CallVote, opts ...grpc.CallOption) (*Empty, error)
	SC_CallPeopleDeny(ctx context.Context, in *CallVote, opts ...grpc.CallOption) (*Empty, error)
	FdClose(ctx context.Context, in *FDCloseEvent, opts ...grpc.CallOption) (*Empty, error)
	FdCreate(ctx context.Context, in *FDCreateEvent, opts ...grpc.CallOption) (*Empty, error)
}

type twinAgoraClient struct {
	cc grpc.ClientConnInterface
}

func NewTwinAgoraClient(cc grpc.ClientConnInterface) TwinAgoraClient {
	return &twinAgoraClient{cc}
}

func (c *twinAgoraClient) CS_Heartbeat(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/CS_Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinAgoraClient) CS_CallPeople(ctx context.Context, in *CallPeopleReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/CS_CallPeople", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinAgoraClient) CS_CancelCallPeople(ctx context.Context, in *CancelCallPeopleReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/CS_CancelCallPeople", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinAgoraClient) CS_PeopleEntry(ctx context.Context, in *PeopleEntry, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/CS_PeopleEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinAgoraClient) CS_PeopleLeave(ctx context.Context, in *PeopleLeaveRes, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/CS_PeopleLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinAgoraClient) CS_CallPeopleAccept(ctx context.Context, in *CallVote, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/CS_CallPeopleAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinAgoraClient) CS_CallPeopleDeny(ctx context.Context, in *CallVote, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/CS_CallPeopleDeny", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinAgoraClient) CS_RoomHeartbeat(ctx context.Context, in *RoomHeartbeatReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/CS_RoomHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinAgoraClient) SC_CallPeople(ctx context.Context, in *CallPeopleRes, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/SC_CallPeople", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinAgoraClient) SC_CancelCallPeople(ctx context.Context, in *CancelCallPeopleReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/SC_CancelCallPeople", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinAgoraClient) SC_PeopleEntry(ctx context.Context, in *PeopleEntry, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/SC_PeopleEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinAgoraClient) SC_PeopleLeave(ctx context.Context, in *PeopleLeaveRes, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/SC_PeopleLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinAgoraClient) SC_CallReply(ctx context.Context, in *CallReply, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/SC_CallReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinAgoraClient) SC_CallPeopleAccept(ctx context.Context, in *CallVote, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/SC_CallPeopleAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinAgoraClient) SC_CallPeopleDeny(ctx context.Context, in *CallVote, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/SC_CallPeopleDeny", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinAgoraClient) FdClose(ctx context.Context, in *FDCloseEvent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/FdClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twinAgoraClient) FdCreate(ctx context.Context, in *FDCreateEvent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.TwinAgora/FdCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwinAgoraServer is the server API for TwinAgora service.
// All implementations must embed UnimplementedTwinAgoraServer
// for forward compatibility
type TwinAgoraServer interface {
	CS_Heartbeat(context.Context, *Heartbeat) (*Empty, error)
	CS_CallPeople(context.Context, *CallPeopleReq) (*Empty, error)
	CS_CancelCallPeople(context.Context, *CancelCallPeopleReq) (*Empty, error)
	CS_PeopleEntry(context.Context, *PeopleEntry) (*Empty, error)
	CS_PeopleLeave(context.Context, *PeopleLeaveRes) (*Empty, error)
	CS_CallPeopleAccept(context.Context, *CallVote) (*Empty, error)
	CS_CallPeopleDeny(context.Context, *CallVote) (*Empty, error)
	CS_RoomHeartbeat(context.Context, *RoomHeartbeatReq) (*Empty, error)
	SC_CallPeople(context.Context, *CallPeopleRes) (*Empty, error)
	SC_CancelCallPeople(context.Context, *CancelCallPeopleReq) (*Empty, error)
	SC_PeopleEntry(context.Context, *PeopleEntry) (*Empty, error)
	SC_PeopleLeave(context.Context, *PeopleLeaveRes) (*Empty, error)
	SC_CallReply(context.Context, *CallReply) (*Empty, error)
	SC_CallPeopleAccept(context.Context, *CallVote) (*Empty, error)
	SC_CallPeopleDeny(context.Context, *CallVote) (*Empty, error)
	FdClose(context.Context, *FDCloseEvent) (*Empty, error)
	FdCreate(context.Context, *FDCreateEvent) (*Empty, error)
	mustEmbedUnimplementedTwinAgoraServer()
}

// UnimplementedTwinAgoraServer must be embedded to have forward compatible implementations.
type UnimplementedTwinAgoraServer struct {
}

func (UnimplementedTwinAgoraServer) CS_Heartbeat(context.Context, *Heartbeat) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_Heartbeat not implemented")
}
func (UnimplementedTwinAgoraServer) CS_CallPeople(context.Context, *CallPeopleReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_CallPeople not implemented")
}
func (UnimplementedTwinAgoraServer) CS_CancelCallPeople(context.Context, *CancelCallPeopleReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_CancelCallPeople not implemented")
}
func (UnimplementedTwinAgoraServer) CS_PeopleEntry(context.Context, *PeopleEntry) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_PeopleEntry not implemented")
}
func (UnimplementedTwinAgoraServer) CS_PeopleLeave(context.Context, *PeopleLeaveRes) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_PeopleLeave not implemented")
}
func (UnimplementedTwinAgoraServer) CS_CallPeopleAccept(context.Context, *CallVote) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_CallPeopleAccept not implemented")
}
func (UnimplementedTwinAgoraServer) CS_CallPeopleDeny(context.Context, *CallVote) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_CallPeopleDeny not implemented")
}
func (UnimplementedTwinAgoraServer) CS_RoomHeartbeat(context.Context, *RoomHeartbeatReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CS_RoomHeartbeat not implemented")
}
func (UnimplementedTwinAgoraServer) SC_CallPeople(context.Context, *CallPeopleRes) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_CallPeople not implemented")
}
func (UnimplementedTwinAgoraServer) SC_CancelCallPeople(context.Context, *CancelCallPeopleReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_CancelCallPeople not implemented")
}
func (UnimplementedTwinAgoraServer) SC_PeopleEntry(context.Context, *PeopleEntry) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_PeopleEntry not implemented")
}
func (UnimplementedTwinAgoraServer) SC_PeopleLeave(context.Context, *PeopleLeaveRes) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_PeopleLeave not implemented")
}
func (UnimplementedTwinAgoraServer) SC_CallReply(context.Context, *CallReply) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_CallReply not implemented")
}
func (UnimplementedTwinAgoraServer) SC_CallPeopleAccept(context.Context, *CallVote) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_CallPeopleAccept not implemented")
}
func (UnimplementedTwinAgoraServer) SC_CallPeopleDeny(context.Context, *CallVote) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SC_CallPeopleDeny not implemented")
}
func (UnimplementedTwinAgoraServer) FdClose(context.Context, *FDCloseEvent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FdClose not implemented")
}
func (UnimplementedTwinAgoraServer) FdCreate(context.Context, *FDCreateEvent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FdCreate not implemented")
}
func (UnimplementedTwinAgoraServer) mustEmbedUnimplementedTwinAgoraServer() {}

// UnsafeTwinAgoraServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwinAgoraServer will
// result in compilation errors.
type UnsafeTwinAgoraServer interface {
	mustEmbedUnimplementedTwinAgoraServer()
}

func RegisterTwinAgoraServer(s grpc.ServiceRegistrar, srv TwinAgoraServer) {
	s.RegisterService(&TwinAgora_ServiceDesc, srv)
}

func _TwinAgora_CS_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Heartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).CS_Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/CS_Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).CS_Heartbeat(ctx, req.(*Heartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinAgora_CS_CallPeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallPeopleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).CS_CallPeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/CS_CallPeople",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).CS_CallPeople(ctx, req.(*CallPeopleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinAgora_CS_CancelCallPeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCallPeopleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).CS_CancelCallPeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/CS_CancelCallPeople",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).CS_CancelCallPeople(ctx, req.(*CancelCallPeopleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinAgora_CS_PeopleEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeopleEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).CS_PeopleEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/CS_PeopleEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).CS_PeopleEntry(ctx, req.(*PeopleEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinAgora_CS_PeopleLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeopleLeaveRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).CS_PeopleLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/CS_PeopleLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).CS_PeopleLeave(ctx, req.(*PeopleLeaveRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinAgora_CS_CallPeopleAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).CS_CallPeopleAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/CS_CallPeopleAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).CS_CallPeopleAccept(ctx, req.(*CallVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinAgora_CS_CallPeopleDeny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).CS_CallPeopleDeny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/CS_CallPeopleDeny",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).CS_CallPeopleDeny(ctx, req.(*CallVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinAgora_CS_RoomHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomHeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).CS_RoomHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/CS_RoomHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).CS_RoomHeartbeat(ctx, req.(*RoomHeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinAgora_SC_CallPeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallPeopleRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).SC_CallPeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/SC_CallPeople",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).SC_CallPeople(ctx, req.(*CallPeopleRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinAgora_SC_CancelCallPeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCallPeopleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).SC_CancelCallPeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/SC_CancelCallPeople",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).SC_CancelCallPeople(ctx, req.(*CancelCallPeopleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinAgora_SC_PeopleEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeopleEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).SC_PeopleEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/SC_PeopleEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).SC_PeopleEntry(ctx, req.(*PeopleEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinAgora_SC_PeopleLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeopleLeaveRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).SC_PeopleLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/SC_PeopleLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).SC_PeopleLeave(ctx, req.(*PeopleLeaveRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinAgora_SC_CallReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).SC_CallReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/SC_CallReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).SC_CallReply(ctx, req.(*CallReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinAgora_SC_CallPeopleAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).SC_CallPeopleAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/SC_CallPeopleAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).SC_CallPeopleAccept(ctx, req.(*CallVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinAgora_SC_CallPeopleDeny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).SC_CallPeopleDeny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/SC_CallPeopleDeny",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).SC_CallPeopleDeny(ctx, req.(*CallVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinAgora_FdClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FDCloseEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).FdClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/FdClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).FdClose(ctx, req.(*FDCloseEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwinAgora_FdCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FDCreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwinAgoraServer).FdCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TwinAgora/FdCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwinAgoraServer).FdCreate(ctx, req.(*FDCreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// TwinAgora_ServiceDesc is the grpc.ServiceDesc for TwinAgora service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwinAgora_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TwinAgora",
	HandlerType: (*TwinAgoraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CS_Heartbeat",
			Handler:    _TwinAgora_CS_Heartbeat_Handler,
		},
		{
			MethodName: "CS_CallPeople",
			Handler:    _TwinAgora_CS_CallPeople_Handler,
		},
		{
			MethodName: "CS_CancelCallPeople",
			Handler:    _TwinAgora_CS_CancelCallPeople_Handler,
		},
		{
			MethodName: "CS_PeopleEntry",
			Handler:    _TwinAgora_CS_PeopleEntry_Handler,
		},
		{
			MethodName: "CS_PeopleLeave",
			Handler:    _TwinAgora_CS_PeopleLeave_Handler,
		},
		{
			MethodName: "CS_CallPeopleAccept",
			Handler:    _TwinAgora_CS_CallPeopleAccept_Handler,
		},
		{
			MethodName: "CS_CallPeopleDeny",
			Handler:    _TwinAgora_CS_CallPeopleDeny_Handler,
		},
		{
			MethodName: "CS_RoomHeartbeat",
			Handler:    _TwinAgora_CS_RoomHeartbeat_Handler,
		},
		{
			MethodName: "SC_CallPeople",
			Handler:    _TwinAgora_SC_CallPeople_Handler,
		},
		{
			MethodName: "SC_CancelCallPeople",
			Handler:    _TwinAgora_SC_CancelCallPeople_Handler,
		},
		{
			MethodName: "SC_PeopleEntry",
			Handler:    _TwinAgora_SC_PeopleEntry_Handler,
		},
		{
			MethodName: "SC_PeopleLeave",
			Handler:    _TwinAgora_SC_PeopleLeave_Handler,
		},
		{
			MethodName: "SC_CallReply",
			Handler:    _TwinAgora_SC_CallReply_Handler,
		},
		{
			MethodName: "SC_CallPeopleAccept",
			Handler:    _TwinAgora_SC_CallPeopleAccept_Handler,
		},
		{
			MethodName: "SC_CallPeopleDeny",
			Handler:    _TwinAgora_SC_CallPeopleDeny_Handler,
		},
		{
			MethodName: "FdClose",
			Handler:    _TwinAgora_FdClose_Handler,
		},
		{
			MethodName: "FdCreate",
			Handler:    _TwinAgora_FdCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "twin_agora.proto",
}
