syntax = "proto3";

import "common.proto";

package pb;
option go_package ="./;pb";

service Gateway {

    rpc CS_Login             (Login)        returns (LoginRes) {}//登陆
    rpc CS_Ping              (PingReq)         returns (PongRes) {}//客户端PING服务端
    rpc CS_Pong              (PongRes)         returns (PingReq) {}//C端响应S端PIN
    rpc CS_Heartbeat         (Heartbeat)    returns (Empty) {}//心跳

    rpc SC_Login             (LoginRes)     returns (Empty) {}//登陆
    rpc SC_Ping              (PingReq)         returns (PongRes) {}//S端测试RTT
    rpc SC_Pong              (PongRes)         returns (PingReq) {}//S端测试RTT
    rpc SC_Heartbeat         (Heartbeat)    returns (Empty) {}//心跳
    rpc SC_KickOff           (KickOff)      returns (Empty) {}//该玩家在其它地方登陆，踢掉了当前连接

    rpc SC_ProjectPush       (ProjectPushMsg)  returns (Empty) {}//service通知网关，给某些用户推送消息

    rpc FdClose             (FDCloseEvent)    returns (Empty) {}//C端长连接关闭，这个并不是C端发起的请求，而是网关获取事件，直接推送到后端服务的

}

//长连接传输内容：一条标准的内容
message Msg{
    int32   id               = 1;//未使用，保留
    int32   sid_fid          = 2;//无实际用，方便开发，service_id+func_id
    int32   data_length      = 3;//内容的总长度
    int32   content_type     = 4;//内容类型
    int32   protocol_type    = 5;//协议类型
    int32   service_id       = 6;//服务ID
    int32   func_id          = 7;//函数ID
    string  reserved         = 8;//保留字段，未使用，后期可存sessionId
    string  content          = 9;//具体传输内容
    string  end_char         =10;//包结束字符，用于TCP粘包，无实际作用，只是保证消息完整性
}

message Login{
    string token = 1;
}

message LoginRes{
    int32   code        = 1;
    string  errMsg      = 2;
    int32   uid         = 3;
}

message ProjectPushMsg{
    string  project_id  = 1;
    string  service_id  = 2;
    string  func_id     = 3;
    string  target_uids = 4;
    string  msg         = 5;
}

message KickOff{
    int64 time = 1;
}

message CfgServer{
    	string  ListenIp            = 1;
    	string  OutIp               = 2;
    	string  HttpdRootPath       = 3;
    	string  HttpPort            = 4;
    	string  WsPort              = 5;
    	string  UdpPort             = 6;
    	int32   Protocol            = 7;
    	string  WsUri               = 8;
    	int32   ContentType         = 9;

    	string  LoginAuthType       =10;
    	string  LoginAuthSecretKey  =11;

    	int32   MaxClientConnNum    =12;
    	int32   MsgContentMax       =13;
    	int64   IOTimeout           =14;
    	int32   ConnTimeout         =15;

    	int32   MapSize             =16;
    	int32   RoomPeople          =17;
    	int32   RoomTimeout         =18;
    	int32   OffLineWaitTime     =19;

    	int32   LockMode            =20;
    	int32   FPS                 =21;
    	int32   RoomReadyTimeout    =22;
    	int32   Store               =23;
    	string  TcpPort             =24;
}

message CfgProtoMap{
    map<int32,CfgProtoServiceFunc> client = 1;
    map<int32,CfgProtoServiceFunc> server = 2;
}

message CfgProtoServiceFunc{
    int32   id          = 1;
    string  service_id  = 2;
    string  func_id     = 3;
    string  func_name   = 4;
    string  response    = 6;
    string  request     = 7;
    string  desc        = 8;
    string  demo        = 9;
}