syntax = "proto3";

import "common.proto";

package pb;
option go_package ="./;pb";

service Gateway {

    rpc CS_Login        (Login)        returns (LoginRes) {}//登陆
    rpc CS_Ping         (PingReq)         returns (PongRes) {}//客户端PING服务端
    rpc CS_Pong         (PongRes)         returns (PingReq) {}//C端响应S端PIN
    rpc CS_Heartbeat    (Heartbeat)    returns (Empty) {}//心跳

    rpc SC_Login             (LoginRes)     returns (Empty) {}//登陆
    rpc SC_Ping              (PingReq)         returns (PongRes) {}//S端测试RTT
    rpc SC_Pong              (PongRes)         returns (PingReq) {}//S端测试RTT
    rpc SC_Heartbeat         (Heartbeat)    returns (Empty) {}//心跳
    rpc SC_KickOff           (KickOff)      returns (Empty) {}//该玩家在其它地方登陆，踢掉了当前连接

    rpc SC_ProjectPush       (ProjectPushMsg)  returns (Empty) {}//service通知网关，给某些用户推送消息

    rpc FdClose             (FDCloseEvent)    returns (Empty) {}//C端长连接关闭，这个并不是C端发起的请求，而是网关获取事件，直接推送到后端服务的
    rpc FdCreate            (FDCreateEvent)   returns (Empty) {}//C端建立了长连接，并已经登陆成功

}

//长连接传输内容：一条标准的内容
message Msg{
    int32   source_uid       = 1;
    int32   id               = 2;//未使用，保留
    int32   sid_fid          = 3;//无实际用，方便开发，service_id+func_id
    int32   data_length      = 4;//内容的总长度
    int32   content_type     = 5;//内容类型
    int32   protocol_type    = 6;//协议类型
    int32   service_id       = 7;//服务ID
    int32   func_id          = 8;//函数ID
    string  reserved         = 9;//保留字段，未使用，后期可存sessionId
    string  content          =10;//具体传输内容
    string  end_char         =11;//包结束字符，用于TCP粘包，无实际作用，只是保证消息完整性
}

message Login{
    int32   source_uid  = 1;
    string  token       = 2;
}

message LoginRes{
    int32   code        = 1;
    string  errMsg      = 2;
    int32   uid         = 3;
}

message ProjectPushMsg{
    int32   source_uid  = 1;
    int32   project_id  = 2;
    int32   service_id  = 3;
    int32   func_id     = 4;
    string  target_uids = 5;
    string  msg         = 6;
}

message KickOff{
    int32   source_uid  = 1;
    int64   time        = 2;
}

message CfgServer{
    string  ListenIp            = 1;
    string  OutIp               = 2;
    string  OutDomain           = 3;
    string  WsPort              = 4;
    string  TcpPort             = 5;
    string  UdpPort             = 6;
    string  WsUri               = 7;
    int32   DefaultProtocolType = 8;
    int32   DefaultContentType  = 9;
    string  LoginAuthType       =10;
    string  LoginAuthSecretKey  =11;
    int32   MaxClientConnNum    =12;
    int32   MsgContentMax       =13;
    int64   IOTimeout           =14;
    int32   ConnTimeout         =15;
    int32   ClientHeartbeatTime =16;
    int32   ServerHeartbeatTime =17;
}

message CfgProtoMap{
    map<int32,CfgProtoServiceFunc> client = 1;
    map<int32,CfgProtoServiceFunc> server = 2;
}

message CfgProtoServiceFunc{
    int32   id          = 1;
    string  service_id  = 2;
    string  func_id     = 3;
    string  func_name   = 4;
    string  response    = 6;
    string  request     = 7;
    string  desc        = 8;
    string  demo        = 9;
}